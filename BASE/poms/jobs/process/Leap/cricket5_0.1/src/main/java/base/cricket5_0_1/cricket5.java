// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package base.cricket5_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: cricket5 Purpose: cricket<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class cricket5 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "cricket5";
	private final String projectName = "BASE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					cricket5.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(cricket5.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_TMAP_OUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tMap_1_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_1_TMAP_IN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_TMAP_OUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tMap_2_TMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tMap_2_TMAP_IN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_2_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_2_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_2_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class winners_captainsStruct implements routines.system.IPersistableRow<winners_captainsStruct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(winners_captainsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer Team_Id;

		public Integer getTeam_Id() {
			return this.Team_Id;
		}

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Id = readInteger(dis);

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Id = readInteger(dis);

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Team_Id, dos);

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Team_Id, dos);

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Id=" + String.valueOf(Team_Id));
			sb.append(",Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class winnersStruct implements routines.system.IPersistableRow<winnersStruct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer Team_Id;

		public Integer getTeam_Id() {
			return this.Team_Id;
		}

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Id = readInteger(dis);

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_Id = readInteger(dis);

					this.Team_Name = readString(dis);

					this.count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Team_Id, dos);

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Team_Id, dos);

				// String

				writeString(this.Team_Name, dos);

				// Integer

				writeInteger(this.count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_Id=" + String.valueOf(Team_Id));
			sb.append(",Team_Name=" + Team_Name);
			sb.append(",count=" + String.valueOf(count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(winnersStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer Team_SK;

		public Integer getTeam_SK() {
			return this.Team_SK;
		}

		public Integer Team_Id;

		public Integer getTeam_Id() {
			return this.Team_Id;
		}

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_SK = readInteger(dis);

					this.Team_Id = readInteger(dis);

					this.Team_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_SK = readInteger(dis);

					this.Team_Id = readInteger(dis);

					this.Team_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Team_SK, dos);

				// Integer

				writeInteger(this.Team_Id, dos);

				// String

				writeString(this.Team_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Team_SK, dos);

				// Integer

				writeInteger(this.Team_Id, dos);

				// String

				writeString(this.Team_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_SK=" + String.valueOf(Team_SK));
			sb.append(",Team_Id=" + String.valueOf(Team_Id));
			sb.append(",Team_Name=" + Team_Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer Team_SK;

		public Integer getTeam_SK() {
			return this.Team_SK;
		}

		public Integer Team_Id;

		public Integer getTeam_Id() {
			return this.Team_Id;
		}

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_SK = readInteger(dis);

					this.Team_Id = readInteger(dis);

					this.Team_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_SK = readInteger(dis);

					this.Team_Id = readInteger(dis);

					this.Team_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Team_SK, dos);

				// Integer

				writeInteger(this.Team_Id, dos);

				// String

				writeString(this.Team_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Team_SK, dos);

				// Integer

				writeInteger(this.Team_Id, dos);

				// String

				writeString(this.Team_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_SK=" + String.valueOf(Team_SK));
			sb.append(",Team_Id=" + String.valueOf(Team_Id));
			sb.append(",Team_Name=" + Team_Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer Team_SK;

		public Integer getTeam_SK() {
			return this.Team_SK;
		}

		public Integer Team_Id;

		public Integer getTeam_Id() {
			return this.Team_Id;
		}

		public String Team_Name;

		public String getTeam_Name() {
			return this.Team_Name;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_SK = readInteger(dis);

					this.Team_Id = readInteger(dis);

					this.Team_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Team_SK = readInteger(dis);

					this.Team_Id = readInteger(dis);

					this.Team_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Team_SK, dos);

				// Integer

				writeInteger(this.Team_Id, dos);

				// String

				writeString(this.Team_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Team_SK, dos);

				// Integer

				writeInteger(this.Team_Id, dos);

				// String

				writeString(this.Team_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Team_SK=" + String.valueOf(Team_SK));
			sb.append(",Team_Id=" + String.valueOf(Team_Id));
			sb.append(",Team_Name=" + Team_Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row1Struct row3 = row1;
				winnersStruct winners = new winnersStruct();
				winnersStruct row12 = winners;
				winners_captainsStruct winners_captains = new winners_captainsStruct();
				winners_captainsStruct row14 = winners_captains;
				row15Struct row15 = new row15Struct();
				row15Struct row17 = row15;
				row19Struct row19 = new row19Struct();
				row16Struct row16 = new row16Struct();
				row16Struct row18 = row16;
				row20Struct row20 = new row20Struct();

				/**
				 * [tMap_1_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_1_TMAP_OUT", false);
				start_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_OUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_1_TMAP_OUT = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row6Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1_TMAP_OUT__Struct {
				}
				Var__tMap_1_TMAP_OUT__Struct Var__tMap_1_TMAP_OUT = new Var__tMap_1_TMAP_OUT__Struct();
// ###############################

// ###############################
// # Outputs initialization
// ###############################

				class SortableRow_tMap_1_1 implements Comparable<SortableRow_tMap_1_1>,
						routines.system.IPersistableRow<SortableRow_tMap_1_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row6__match_winner;

					// row3
					Integer row3__Team_SK;
					Integer row3__Team_Id;
					String row3__Team_Name;

					public void fillFrom(row1Struct row3, String exprKey_row6__match_winner) {

						this.row3__Team_SK = row3.Team_SK;

						this.row3__Team_Id = row3.Team_Id;

						this.row3__Team_Name = row3.Team_Name;

						this.exprKey_row6__match_winner = exprKey_row6__match_winner;

					}

					public void copyDataTo(row1Struct row3) {

						row3.Team_SK = this.row3__Team_SK;
						row3.Team_Id = this.row3__Team_Id;
						row3.Team_Name = this.row3__Team_Name;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row3__Team_SK");
						sb.append("=");
						sb.append(String.valueOf(this.row3__Team_SK));

						sb.append(", ");

						sb.append("row3__Team_Id");
						sb.append("=");
						sb.append(String.valueOf(this.row3__Team_Id));

						sb.append(", ");

						sb.append("row3__Team_Name");
						sb.append("=");
						sb.append(String.valueOf(this.row3__Team_Name));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_1_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(this.exprKey_row6__match_winner,
								other.exprKey_row6__match_winner);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1, Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable && object2 instanceof Comparable) {
							returnValue = ((Comparable) object1).compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(), object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row3Struct.commonByteArrayLock_BASE_cricket5) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readByte();
								if (length == -1) {
									this.row3__Team_SK = null;
								} else {

									this.row3__Team_SK = dis.readInt();

								}

								length = dis.readByte();
								if (length == -1) {
									this.row3__Team_Id = null;
								} else {

									this.row3__Team_Id = dis.readInt();

								}

								length = dis.readInt();
								if (length == -1) {
									this.row3__Team_Name = null;
								} else {
									if (length > row3Struct.commonByteArray_BASE_cricket5.length) {
										if (length < 1024 && row3Struct.commonByteArray_BASE_cricket5.length == 0) {
											row3Struct.commonByteArray_BASE_cricket5 = new byte[1024];
										} else {
											row3Struct.commonByteArray_BASE_cricket5 = new byte[2 * length];
										}
									}
									dis.readFully(row3Struct.commonByteArray_BASE_cricket5, 0, length);
									this.row3__Team_Name = new String(row3Struct.commonByteArray_BASE_cricket5, 0,
											length, utf8Charset);
								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row6__match_winner = null;
								} else {
									if (length > row3Struct.commonByteArray_BASE_cricket5.length) {
										if (length < 1024 && row3Struct.commonByteArray_BASE_cricket5.length == 0) {
											row3Struct.commonByteArray_BASE_cricket5 = new byte[1024];
										} else {
											row3Struct.commonByteArray_BASE_cricket5 = new byte[2 * length];
										}
									}
									dis.readFully(row3Struct.commonByteArray_BASE_cricket5, 0, length);
									this.exprKey_row6__match_winner = new String(
											row3Struct.commonByteArray_BASE_cricket5, 0, length, utf8Charset);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void readData(org.jboss.marshalling.Unmarshaller objectIn) {

						synchronized (row3Struct.commonByteArrayLock_BASE_cricket5) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = objectIn.readBoolean();

								length = objectIn.readByte();
								if (length == -1) {
									this.row3__Team_SK = null;
								} else {

									this.row3__Team_SK = objectIn.readInt();

								}

								length = objectIn.readByte();
								if (length == -1) {
									this.row3__Team_Id = null;
								} else {

									this.row3__Team_Id = objectIn.readInt();

								}

								length = objectIn.readInt();
								if (length == -1) {
									this.row3__Team_Name = null;
								} else {
									if (length > row3Struct.commonByteArray_BASE_cricket5.length) {
										if (length < 1024 && row3Struct.commonByteArray_BASE_cricket5.length == 0) {
											row3Struct.commonByteArray_BASE_cricket5 = new byte[1024];
										} else {
											row3Struct.commonByteArray_BASE_cricket5 = new byte[2 * length];
										}
									}
									objectIn.readFully(row3Struct.commonByteArray_BASE_cricket5, 0, length);
									this.row3__Team_Name = new String(row3Struct.commonByteArray_BASE_cricket5, 0,
											length, utf8Charset);
								}

								length = objectIn.readInt();
								if (length == -1) {
									this.exprKey_row6__match_winner = null;
								} else {
									if (length > row3Struct.commonByteArray_BASE_cricket5.length) {
										if (length < 1024 && row3Struct.commonByteArray_BASE_cricket5.length == 0) {
											row3Struct.commonByteArray_BASE_cricket5 = new byte[1024];
										} else {
											row3Struct.commonByteArray_BASE_cricket5 = new byte[2 * length];
										}
									}
									objectIn.readFully(row3Struct.commonByteArray_BASE_cricket5, 0, length);
									this.exprKey_row6__match_winner = new String(
											row3Struct.commonByteArray_BASE_cricket5, 0, length, utf8Charset);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.row3__Team_SK == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);

								dos.writeInt(this.row3__Team_SK);

							}

							if (this.row3__Team_Id == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);

								dos.writeInt(this.row3__Team_Id);

							}

							if (this.row3__Team_Name == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__Team_Name.getBytes(utf8Charset);
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.exprKey_row6__match_winner == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row6__match_winner.getBytes(utf8Charset);
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					public void writeData(org.jboss.marshalling.Marshaller objectOut) {
						try {

							objectOut.writeBoolean(this.is__rejectedInnerJoin);

							if (this.row3__Team_SK == null) {
								objectOut.writeByte(-1);
							} else {
								objectOut.writeByte(0);

								objectOut.writeInt(this.row3__Team_SK);

							}

							if (this.row3__Team_Id == null) {
								objectOut.writeByte(-1);
							} else {
								objectOut.writeByte(0);

								objectOut.writeInt(this.row3__Team_Id);

							}

							if (this.row3__Team_Name == null) {
								objectOut.writeInt(-1);
							} else {
								byte[] byteArray = this.row3__Team_Name.getBytes(utf8Charset);
								objectOut.writeInt(byteArray.length);
								objectOut.write(byteArray);
							}

							if (this.exprKey_row6__match_winner == null) {
								objectOut.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row6__match_winner.getBytes(utf8Charset);
								objectOut.writeInt(byteArray.length);
								objectOut.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					public boolean supportJboss() {
						return true;
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_1_1> fsi_tMap_1_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_1_1>(
						"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/temp" + "/" + jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid + "_tMap_1_1",
						2000000) {
					public SortableRow_tMap_1_1 createRowInstance() {
						return new SortableRow_tMap_1_1();
					}
				};

				fsi_tMap_1_1.initPut();

				/**
				 * [tMap_1_TMAP_OUT begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[3];

					public void addRow(String[] row) {

						for (int i = 0; i < 3; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 2 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "Team_SK", "Team_Id", "Team_Name", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"D:/Current/Training/Cprime/Fidelity 2023/Content/Course Content/13 Data Integration/labs/Team.csv"/**
																															 * End
																															 * field
																															 * tFileInputDelimited_1:FILENAME
																															 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_1),
									fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
								if (!(rowtFileInputDelimited_1.length == 1
										&& ("\015").equals(rowtFileInputDelimited_1[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_1),
										fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.Team_SK = null;

								row1.Team_Id = null;

								row1.Team_Name = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Team_SK = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
													ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Team_SK", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Team_SK = null;

									}

								} else {

									row1.Team_SK = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Team_Id = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
													ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Team_Id", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Team_Id = null;

									}

								} else {

									row1.Team_Id = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Team_Name = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Team_Name = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

///////////////////////		

							String[] row_tLogRow_1 = new String[3];

							if (row1.Team_SK != null) { //
								row_tLogRow_1[0] = String.valueOf(row1.Team_SK);

							} //

							if (row1.Team_Id != null) { //
								row_tLogRow_1[1] = String.valueOf(row1.Team_Id);

							} //

							if (row1.Team_Name != null) { //
								row_tLogRow_1[2] = String.valueOf(row1.Team_Name);

							} //

							util_tLogRow_1.addRow(row_tLogRow_1);
							nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

							row3 = row1;

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tMap_1_TMAP_OUT main ] start
							 */

							currentVirtualComponent = "tMap_1";

							currentComponent = "tMap_1_TMAP_OUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_1_TMAP_OUT = false;

							String exprKey_row6__match_winner = row3.Team_Name;

							SortableRow_tMap_1_1 sortableRow_tMap_1_1 = fsi_tMap_1_1.getNextFreeRow();

							sortableRow_tMap_1_1.fillFrom(row3, exprKey_row6__match_winner);

							fsi_tMap_1_1.put(sortableRow_tMap_1_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1_TMAP_OUT = false;
							boolean mainRowRejected_tMap_1_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_1_TMAP_OUT++;

							/**
							 * [tMap_1_TMAP_OUT main ] stop
							 */

							/**
							 * [tMap_1_TMAP_OUT process_data_begin ] start
							 */

							currentVirtualComponent = "tMap_1";

							currentComponent = "tMap_1_TMAP_OUT";

							/**
							 * [tMap_1_TMAP_OUT process_data_begin ] stop
							 */

							/**
							 * [tMap_1_TMAP_OUT process_data_end ] start
							 */

							currentVirtualComponent = "tMap_1";

							currentComponent = "tMap_1_TMAP_OUT";

							/**
							 * [tMap_1_TMAP_OUT process_data_end ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tMap_1_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_OUT";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_1_TMAP_OUT", true);
				end_Hash.put("tMap_1_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_1_TMAP_OUT end ] stop
				 */

				/**
				 * [tMap_2_TMAP_OUT begin ] start
				 */

				ok_Hash.put("tMap_2_TMAP_OUT", false);
				start_Hash.put("tMap_2_TMAP_OUT", System.currentTimeMillis());

				currentVirtualComponent = "tMap_2";

				currentComponent = "tMap_2_TMAP_OUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tMap_2_TMAP_OUT = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row13Struct>) ((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row13Struct>) globalMap
						.get("tHash_Lookup_row13"));

				row13Struct row13HashKey = new row13Struct();
				row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2_TMAP_OUT__Struct {
				}
				Var__tMap_2_TMAP_OUT__Struct Var__tMap_2_TMAP_OUT = new Var__tMap_2_TMAP_OUT__Struct();
// ###############################

// ###############################
// # Outputs initialization
// ###############################

				class SortableRow_tMap_2_1 implements Comparable<SortableRow_tMap_2_1>,
						routines.system.IPersistableRow<SortableRow_tMap_2_1> { // G_TM_B_001

					boolean is__rejectedInnerJoin;

					String exprKey_row13__Player_team;

					// row12
					Integer row12__Team_Id;
					String row12__Team_Name;
					Integer row12__count;

					public void fillFrom(winnersStruct row12, String exprKey_row13__Player_team) {

						this.row12__Team_Id = row12.Team_Id;

						this.row12__Team_Name = row12.Team_Name;

						this.row12__count = row12.count;

						this.exprKey_row13__Player_team = exprKey_row13__Player_team;

					}

					public void copyDataTo(winnersStruct row12) {

						row12.Team_Id = this.row12__Team_Id;
						row12.Team_Name = this.row12__Team_Name;
						row12.count = this.row12__count;

					}

					public String toString() {

						StringBuilder sb = new StringBuilder();
						sb.append(super.toString());
						sb.append("[");

						sb.append("row12__Team_Id");
						sb.append("=");
						sb.append(String.valueOf(this.row12__Team_Id));

						sb.append(", ");

						sb.append("row12__Team_Name");
						sb.append("=");
						sb.append(String.valueOf(this.row12__Team_Name));

						sb.append(", ");

						sb.append("row12__count");
						sb.append("=");
						sb.append(String.valueOf(this.row12__count));

						sb.append("]");

						return sb.toString();
					}

					public int compareTo(SortableRow_tMap_2_1 other) {

						int returnValue = 0;

						returnValue = checkNullsAndCompare(this.exprKey_row13__Player_team,
								other.exprKey_row13__Player_team);
						if (returnValue != 0) {
							return returnValue;
						}

						return returnValue;
					}

					private int checkNullsAndCompare(Object object1, Object object2) {
						int returnValue = 0;
						if (object1 instanceof Comparable && object2 instanceof Comparable) {
							returnValue = ((Comparable) object1).compareTo(object2);
						} else if (object1 != null && object2 != null) {
							returnValue = compareStrings(object1.toString(), object2.toString());
						} else if (object1 == null && object2 != null) {
							returnValue = 1;
						} else if (object1 != null && object2 == null) {
							returnValue = -1;
						} else {
							returnValue = 0;
						}

						return returnValue;
					}

					private int compareStrings(String string1, String string2) {
						return string1.compareTo(string2);
					}

					public void readData(ObjectInputStream dis) {

						synchronized (row12Struct.commonByteArrayLock_BASE_cricket5) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = dis.readBoolean();

								length = dis.readByte();
								if (length == -1) {
									this.row12__Team_Id = null;
								} else {

									this.row12__Team_Id = dis.readInt();

								}

								length = dis.readInt();
								if (length == -1) {
									this.row12__Team_Name = null;
								} else {
									if (length > row12Struct.commonByteArray_BASE_cricket5.length) {
										if (length < 1024 && row12Struct.commonByteArray_BASE_cricket5.length == 0) {
											row12Struct.commonByteArray_BASE_cricket5 = new byte[1024];
										} else {
											row12Struct.commonByteArray_BASE_cricket5 = new byte[2 * length];
										}
									}
									dis.readFully(row12Struct.commonByteArray_BASE_cricket5, 0, length);
									this.row12__Team_Name = new String(row12Struct.commonByteArray_BASE_cricket5, 0,
											length, utf8Charset);
								}

								length = dis.readByte();
								if (length == -1) {
									this.row12__count = null;
								} else {

									this.row12__count = dis.readInt();

								}

								length = dis.readInt();
								if (length == -1) {
									this.exprKey_row13__Player_team = null;
								} else {
									if (length > row12Struct.commonByteArray_BASE_cricket5.length) {
										if (length < 1024 && row12Struct.commonByteArray_BASE_cricket5.length == 0) {
											row12Struct.commonByteArray_BASE_cricket5 = new byte[1024];
										} else {
											row12Struct.commonByteArray_BASE_cricket5 = new byte[2 * length];
										}
									}
									dis.readFully(row12Struct.commonByteArray_BASE_cricket5, 0, length);
									this.exprKey_row13__Player_team = new String(
											row12Struct.commonByteArray_BASE_cricket5, 0, length, utf8Charset);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void readData(org.jboss.marshalling.Unmarshaller objectIn) {

						synchronized (row12Struct.commonByteArrayLock_BASE_cricket5) {

							try {

								int length = 0;

								this.is__rejectedInnerJoin = objectIn.readBoolean();

								length = objectIn.readByte();
								if (length == -1) {
									this.row12__Team_Id = null;
								} else {

									this.row12__Team_Id = objectIn.readInt();

								}

								length = objectIn.readInt();
								if (length == -1) {
									this.row12__Team_Name = null;
								} else {
									if (length > row12Struct.commonByteArray_BASE_cricket5.length) {
										if (length < 1024 && row12Struct.commonByteArray_BASE_cricket5.length == 0) {
											row12Struct.commonByteArray_BASE_cricket5 = new byte[1024];
										} else {
											row12Struct.commonByteArray_BASE_cricket5 = new byte[2 * length];
										}
									}
									objectIn.readFully(row12Struct.commonByteArray_BASE_cricket5, 0, length);
									this.row12__Team_Name = new String(row12Struct.commonByteArray_BASE_cricket5, 0,
											length, utf8Charset);
								}

								length = objectIn.readByte();
								if (length == -1) {
									this.row12__count = null;
								} else {

									this.row12__count = objectIn.readInt();

								}

								length = objectIn.readInt();
								if (length == -1) {
									this.exprKey_row13__Player_team = null;
								} else {
									if (length > row12Struct.commonByteArray_BASE_cricket5.length) {
										if (length < 1024 && row12Struct.commonByteArray_BASE_cricket5.length == 0) {
											row12Struct.commonByteArray_BASE_cricket5 = new byte[1024];
										} else {
											row12Struct.commonByteArray_BASE_cricket5 = new byte[2 * length];
										}
									}
									objectIn.readFully(row12Struct.commonByteArray_BASE_cricket5, 0, length);
									this.exprKey_row13__Player_team = new String(
											row12Struct.commonByteArray_BASE_cricket5, 0, length, utf8Charset);
								}

							} catch (IOException e) {
								throw new RuntimeException(e);

							}

						}
					}

					public void writeData(ObjectOutputStream dos) {
						try {

							dos.writeBoolean(this.is__rejectedInnerJoin);

							if (this.row12__Team_Id == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);

								dos.writeInt(this.row12__Team_Id);

							}

							if (this.row12__Team_Name == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.row12__Team_Name.getBytes(utf8Charset);
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

							if (this.row12__count == null) {
								dos.writeByte(-1);
							} else {
								dos.writeByte(0);

								dos.writeInt(this.row12__count);

							}

							if (this.exprKey_row13__Player_team == null) {
								dos.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row13__Player_team.getBytes(utf8Charset);
								dos.writeInt(byteArray.length);
								dos.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					public void writeData(org.jboss.marshalling.Marshaller objectOut) {
						try {

							objectOut.writeBoolean(this.is__rejectedInnerJoin);

							if (this.row12__Team_Id == null) {
								objectOut.writeByte(-1);
							} else {
								objectOut.writeByte(0);

								objectOut.writeInt(this.row12__Team_Id);

							}

							if (this.row12__Team_Name == null) {
								objectOut.writeInt(-1);
							} else {
								byte[] byteArray = this.row12__Team_Name.getBytes(utf8Charset);
								objectOut.writeInt(byteArray.length);
								objectOut.write(byteArray);
							}

							if (this.row12__count == null) {
								objectOut.writeByte(-1);
							} else {
								objectOut.writeByte(0);

								objectOut.writeInt(this.row12__count);

							}

							if (this.exprKey_row13__Player_team == null) {
								objectOut.writeInt(-1);
							} else {
								byte[] byteArray = this.exprKey_row13__Player_team.getBytes(utf8Charset);
								objectOut.writeInt(byteArray.length);
								objectOut.write(byteArray);
							}

						} catch (IOException e) {
							throw new RuntimeException(e);
						}
					}

					public boolean supportJboss() {
						return true;
					}

				} // G_TM_B_001

				org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_2_1> fsi_tMap_2_1 = new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_2_1>(
						"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/temp" + "/" + jobName + "_tMapData_"
								+ Thread.currentThread().getId() + "_" + pid + "_tMap_2_1",
						2000000) {
					public SortableRow_tMap_2_1 createRowInstance() {
						return new SortableRow_tMap_2_1();
					}
				};

				fsi_tMap_2_1.initPut();

				/**
				 * [tMap_2_TMAP_OUT begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "winners");
				}

				int tos_count_tLogRow_4 = 0;

				///////////////////////

				class Util_tLogRow_4 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[3];

					public void addRow(String[] row) {

						for (int i = 0; i < 3; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 2 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
				util_tLogRow_4.setTableName("tLogRow_4");
				util_tLogRow_4.addRow(new String[] { "Team_Id", "Team_Name", "count", });
				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
///////////////////////    			

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tMap_1_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_1_TMAP_IN", false);
				start_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_IN";

				int tos_count_tMap_1_TMAP_IN = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1_TMAP_IN__Struct {
				}
				Var__tMap_1_TMAP_IN__Struct Var__tMap_1_TMAP_IN = new Var__tMap_1_TMAP_IN__Struct();
// ###############################

// ###############################
// # Outputs initialization
				winnersStruct winners_tmp = new winnersStruct();
// ###############################

				/**
				 * [tMap_1_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_1_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

				fsi_tMap_1_1.endPut();

				if (row3 == null) {
					row3 = new row1Struct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_1_TMAP_IN = false;
				boolean mainRowRejected_tMap_1_TMAP_IN = false;

				///////////////////////////////////////////////
				// Starting Lookup Table "row6"
				///////////////////////////////////////////////

				SortableRow_tMap_1_1 rsc_tMap_1_1;

				tHash_Lookup_row6.initGet();

				fsi_tMap_1_1.initGet();

				// TEST firstLookupIsPersistentSorted=true isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_1_TMAP_IN = false;

				while (fsi_tMap_1_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_1_1 = (SortableRow_tMap_1_1) fsi_tMap_1_1.next();
					rsc_tMap_1_1.copyDataTo(row3);

					rejectedInnerJoin_tMap_1_TMAP_IN = rsc_tMap_1_1.is__rejectedInnerJoin;

					boolean forceLooprow6 = false;

					row6Struct row6ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1_TMAP_IN = false;

						row6HashKey.match_winner = rsc_tMap_1_1.exprKey_row6__match_winner;

						tHash_Lookup_row6.lookup(row6HashKey);

						if (!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

							forceLooprow6 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLooprow6 = true;
					} // G 21

					row6Struct row6 = null;

					while ((tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) || forceLooprow6) { // G_TM_M_043

						// CALL close loop of lookup 'row6'

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (!forceLooprow6) { // G 46

							fromLookup_row6 = tHash_Lookup_row6.next();

							if (fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}

						} // G 46

						forceLooprow6 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1_TMAP_IN__Struct Var = Var__tMap_1_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							winners = null;

// # Output table : 'winners'
							winners_tmp.Team_Id = row3.Team_Id;
							winners_tmp.Team_Name = row3.Team_Name;
							winners_tmp.count = row6.count;
							winners = winners_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1_TMAP_IN = false;

						tos_count_tMap_1_TMAP_IN++;

						/**
						 * [tMap_1_TMAP_IN main ] stop
						 */

						/**
						 * [tMap_1_TMAP_IN process_data_begin ] start
						 */

						currentVirtualComponent = "tMap_1";

						currentComponent = "tMap_1_TMAP_IN";

						/**
						 * [tMap_1_TMAP_IN process_data_begin ] stop
						 */
// Start of branch "winners"
						if (winners != null) {

							/**
							 * [tLogRow_4 main ] start
							 */

							currentComponent = "tLogRow_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "winners"

								);
							}

///////////////////////		

							String[] row_tLogRow_4 = new String[3];

							if (winners.Team_Id != null) { //
								row_tLogRow_4[0] = String.valueOf(winners.Team_Id);

							} //

							if (winners.Team_Name != null) { //
								row_tLogRow_4[1] = String.valueOf(winners.Team_Name);

							} //

							if (winners.count != null) { //
								row_tLogRow_4[2] = String.valueOf(winners.count);

							} //

							util_tLogRow_4.addRow(row_tLogRow_4);
							nb_line_tLogRow_4++;
//////

//////                    

///////////////////////    			

							row12 = winners;

							tos_count_tLogRow_4++;

							/**
							 * [tLogRow_4 main ] stop
							 */

							/**
							 * [tLogRow_4 process_data_begin ] start
							 */

							currentComponent = "tLogRow_4";

							/**
							 * [tLogRow_4 process_data_begin ] stop
							 */

							/**
							 * [tMap_2_TMAP_OUT main ] start
							 */

							currentVirtualComponent = "tMap_2";

							currentComponent = "tMap_2_TMAP_OUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row12"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2_TMAP_OUT = false;

							hasCasePrimitiveKeyWithNull_tMap_2_TMAP_OUT = false;

							String exprKey_row13__Player_team = row12.Team_Name;

							SortableRow_tMap_2_1 sortableRow_tMap_2_1 = fsi_tMap_2_1.getNextFreeRow();

							sortableRow_tMap_2_1.fillFrom(row12, exprKey_row13__Player_team);

							fsi_tMap_2_1.put(sortableRow_tMap_2_1);

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2_TMAP_OUT = false;
							boolean mainRowRejected_tMap_2_TMAP_OUT = false;

							// ###############################

							tos_count_tMap_2_TMAP_OUT++;

							/**
							 * [tMap_2_TMAP_OUT main ] stop
							 */

							/**
							 * [tMap_2_TMAP_OUT process_data_begin ] start
							 */

							currentVirtualComponent = "tMap_2";

							currentComponent = "tMap_2_TMAP_OUT";

							/**
							 * [tMap_2_TMAP_OUT process_data_begin ] stop
							 */

							/**
							 * [tMap_2_TMAP_OUT process_data_end ] start
							 */

							currentVirtualComponent = "tMap_2";

							currentComponent = "tMap_2_TMAP_OUT";

							/**
							 * [tMap_2_TMAP_OUT process_data_end ] stop
							 */

							/**
							 * [tLogRow_4 process_data_end ] start
							 */

							currentComponent = "tLogRow_4";

							/**
							 * [tLogRow_4 process_data_end ] stop
							 */

						} // End of branch "winners"

					} // close loop of lookup 'row6' // G_TM_M_043

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_1_TMAP_IN process_data_end ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_IN";

				/**
				 * [tMap_1_TMAP_IN process_data_end ] stop
				 */

				/**
				 * [tMap_1_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_IN";

// ###############################
// # Lookup hashes releasing
				fsi_tMap_1_1.endGet();

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

// ###############################      

				ok_Hash.put("tMap_1_TMAP_IN", true);
				end_Hash.put("tMap_1_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_1_TMAP_IN end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

//////

				java.io.PrintStream consoleOut_tLogRow_4 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
				}

				consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
				consoleOut_tLogRow_4.flush();
//////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "winners");
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tMap_2_TMAP_OUT end ] start
				 */

				currentVirtualComponent = "tMap_2";

				currentComponent = "tMap_2_TMAP_OUT";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tMap_2_TMAP_OUT", true);
				end_Hash.put("tMap_2_TMAP_OUT", System.currentTimeMillis());

				/**
				 * [tMap_2_TMAP_OUT end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablerow17Struct extends row17Struct implements Comparable<Comparablerow17Struct> {

					public int compareTo(Comparablerow17Struct other) {

						if (this.count == null && other.count != null) {
							return 1;

						} else if (this.count != null && other.count == null) {
							return -1;

						} else if (this.count != null && other.count != null) {
							if (!this.count.equals(other.count)) {
								return other.count.compareTo(this.count);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow17Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow17Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tLogRow_9 begin ] start
				 */

				ok_Hash.put("tLogRow_9", false);
				start_Hash.put("tLogRow_9", System.currentTimeMillis());

				currentComponent = "tLogRow_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tLogRow_9 = 0;

				///////////////////////

				class Util_tLogRow_9 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[4];

					public void addRow(String[] row) {

						for (int i = 0; i < 4; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 3 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 3 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[3] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_9 util_tLogRow_9 = new Util_tLogRow_9();
				util_tLogRow_9.setTableName("tLogRow_9");
				util_tLogRow_9.addRow(new String[] { "Team_Name", "count", "Player_Name", "cap_count", });
				StringBuilder strBuffer_tLogRow_9 = null;
				int nb_line_tLogRow_9 = 0;
///////////////////////    			

				/**
				 * [tLogRow_9 begin ] stop
				 */

				/**
				 * [tSortRow_2_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortOut", false);
				start_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tSortRow_2_SortOut = 0;

				class Comparablerow18Struct extends row18Struct implements Comparable<Comparablerow18Struct> {

					public int compareTo(Comparablerow18Struct other) {

						if (this.count == null && other.count != null) {
							return 1;

						} else if (this.count != null && other.count == null) {
							return -1;

						} else if (this.count != null && other.count != null) {
							if (!this.count.equals(other.count)) {
								return other.count.compareTo(this.count);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow18Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow18Struct>();

				/**
				 * [tSortRow_2_SortOut begin ] stop
				 */

				/**
				 * [tLogRow_10 begin ] start
				 */

				ok_Hash.put("tLogRow_10", false);
				start_Hash.put("tLogRow_10", System.currentTimeMillis());

				currentComponent = "tLogRow_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tLogRow_10 = 0;

				///////////////////////

				class Util_tLogRow_10 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_10 util_tLogRow_10 = new Util_tLogRow_10();
				util_tLogRow_10.setTableName("tLogRow_10");
				util_tLogRow_10
						.addRow(new String[] { "Team_Name", "count", "Player_Name", "cap_count", "errorMessage", });
				StringBuilder strBuffer_tLogRow_10 = null;
				int nb_line_tLogRow_10 = 0;
///////////////////////    			

				/**
				 * [tLogRow_10 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tLogRow_8 begin ] start
				 */

				ok_Hash.put("tLogRow_8", false);
				start_Hash.put("tLogRow_8", System.currentTimeMillis());

				currentComponent = "tLogRow_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "winners_captains");
				}

				int tos_count_tLogRow_8 = 0;

				///////////////////////

				class Util_tLogRow_8 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[4];

					public void addRow(String[] row) {

						for (int i = 0; i < 4; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 3 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 3 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[3] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_8 util_tLogRow_8 = new Util_tLogRow_8();
				util_tLogRow_8.setTableName("tLogRow_8");
				util_tLogRow_8.addRow(new String[] { "Team_Name", "count", "Player_Name", "cap_count", });
				StringBuilder strBuffer_tLogRow_8 = null;
				int nb_line_tLogRow_8 = 0;
///////////////////////    			

				/**
				 * [tLogRow_8 begin ] stop
				 */

				/**
				 * [tMap_2_TMAP_IN begin ] start
				 */

				ok_Hash.put("tMap_2_TMAP_IN", false);
				start_Hash.put("tMap_2_TMAP_IN", System.currentTimeMillis());

				currentVirtualComponent = "tMap_2";

				currentComponent = "tMap_2_TMAP_IN";

				int tos_count_tMap_2_TMAP_IN = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2_TMAP_IN__Struct {
				}
				Var__tMap_2_TMAP_IN__Struct Var__tMap_2_TMAP_IN = new Var__tMap_2_TMAP_IN__Struct();
// ###############################

// ###############################
// # Outputs initialization
				winners_captainsStruct winners_captains_tmp = new winners_captainsStruct();
// ###############################

				/**
				 * [tMap_2_TMAP_IN begin ] stop
				 */

				/**
				 * [tMap_2_TMAP_IN main ] start
				 */

				currentVirtualComponent = "tMap_2";

				currentComponent = "tMap_2_TMAP_IN";

				boolean hasCasePrimitiveKeyWithNull_tMap_2_TMAP_IN = false;

				fsi_tMap_2_1.endPut();

				if (row12 == null) {
					row12 = new winnersStruct();
				}

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_2_TMAP_IN = false;
				boolean mainRowRejected_tMap_2_TMAP_IN = false;

				///////////////////////////////////////////////
				// Starting Lookup Table "row13"
				///////////////////////////////////////////////

				SortableRow_tMap_2_1 rsc_tMap_2_1;

				tHash_Lookup_row13.initGet();

				fsi_tMap_2_1.initGet();

				// TEST firstLookupIsPersistentSorted=true isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_2_TMAP_IN = false;

				while (fsi_tMap_2_1.hasNext()) { // G_TM_M_250 loop "1"

					// CALL close loop of lookup '1'

					rsc_tMap_2_1 = (SortableRow_tMap_2_1) fsi_tMap_2_1.next();
					rsc_tMap_2_1.copyDataTo(row12);

					rejectedInnerJoin_tMap_2_TMAP_IN = rsc_tMap_2_1.is__rejectedInnerJoin;

					boolean forceLooprow13 = false;

					row13Struct row13ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_2_TMAP_IN) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_2_TMAP_IN = false;

						row13HashKey.Player_team = rsc_tMap_2_1.exprKey_row13__Player_team;

						tHash_Lookup_row13.lookup(row13HashKey);

						if (!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

							forceLooprow13 = true;

						} // G_TM_M_090

					} // G_TM_M_020

					else { // G 20 - G 21
						forceLooprow13 = true;
					} // G 21

					row13Struct row13 = null;

					while ((tHash_Lookup_row13 != null && tHash_Lookup_row13.hasNext()) || forceLooprow13) { // G_TM_M_043

						// CALL close loop of lookup 'row13'

						row13Struct fromLookup_row13 = null;
						row13 = row13Default;

						if (!forceLooprow13) { // G 46

							fromLookup_row13 = tHash_Lookup_row13.next();

							if (fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}

						} // G 46

						forceLooprow13 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2_TMAP_IN__Struct Var = Var__tMap_2_TMAP_IN;// ###############################
							// ###############################
							// # Output tables

							winners_captains = null;

// # Output table : 'winners_captains'
							winners_captains_tmp.Team_Name = row12.Team_Name;
							winners_captains_tmp.count = row12.count;
							winners_captains_tmp.Player_Name = row13.Player_Name;
							winners_captains_tmp.cap_count = row13.cap_count;
							winners_captains = winners_captains_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2_TMAP_IN = false;

						tos_count_tMap_2_TMAP_IN++;

						/**
						 * [tMap_2_TMAP_IN main ] stop
						 */

						/**
						 * [tMap_2_TMAP_IN process_data_begin ] start
						 */

						currentVirtualComponent = "tMap_2";

						currentComponent = "tMap_2_TMAP_IN";

						/**
						 * [tMap_2_TMAP_IN process_data_begin ] stop
						 */
// Start of branch "winners_captains"
						if (winners_captains != null) {

							/**
							 * [tLogRow_8 main ] start
							 */

							currentComponent = "tLogRow_8";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "winners_captains"

								);
							}

///////////////////////		

							String[] row_tLogRow_8 = new String[4];

							if (winners_captains.Team_Name != null) { //
								row_tLogRow_8[0] = String.valueOf(winners_captains.Team_Name);

							} //

							if (winners_captains.count != null) { //
								row_tLogRow_8[1] = String.valueOf(winners_captains.count);

							} //

							if (winners_captains.Player_Name != null) { //
								row_tLogRow_8[2] = String.valueOf(winners_captains.Player_Name);

							} //

							if (winners_captains.cap_count != null) { //
								row_tLogRow_8[3] = String.valueOf(winners_captains.cap_count);

							} //

							util_tLogRow_8.addRow(row_tLogRow_8);
							nb_line_tLogRow_8++;
//////

//////                    

///////////////////////    			

							row14 = winners_captains;

							tos_count_tLogRow_8++;

							/**
							 * [tLogRow_8 main ] stop
							 */

							/**
							 * [tLogRow_8 process_data_begin ] start
							 */

							currentComponent = "tLogRow_8";

							/**
							 * [tLogRow_8 process_data_begin ] stop
							 */

							/**
							 * [tFilterRow_2 main ] start
							 */

							currentComponent = "tFilterRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row14"

								);
							}

							row16 = null;
							row15 = null;
							Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
							ope_tFilterRow_2
									.matches(
											(row14.count == null ? false
													: row14.count.compareTo(
															ParserUtils.parseTo_Integer(String.valueOf(50))) > 0),
											"count.compareTo(50) > 0 failed");

							if (ope_tFilterRow_2.getMatchFlag()) {
								if (row15 == null) {
									row15 = new row15Struct();
								}
								row15.Team_Name = row14.Team_Name;
								row15.count = row14.count;
								row15.Player_Name = row14.Player_Name;
								row15.cap_count = row14.cap_count;
								nb_line_ok_tFilterRow_2++;
							} else {
								if (row16 == null) {
									row16 = new row16Struct();
								}
								row16.Team_Name = row14.Team_Name;
								row16.count = row14.count;
								row16.Player_Name = row14.Player_Name;
								row16.cap_count = row14.cap_count;
								row16.errorMessage = ope_tFilterRow_2.getErrorMsg();
								nb_line_reject_tFilterRow_2++;
							}

							nb_line_tFilterRow_2++;

							tos_count_tFilterRow_2++;

							/**
							 * [tFilterRow_2 main ] stop
							 */

							/**
							 * [tFilterRow_2 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_begin ] stop
							 */
// Start of branch "row15"
							if (row15 != null) {

								/**
								 * [tLogRow_9 main ] start
								 */

								currentComponent = "tLogRow_9";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row15"

									);
								}

///////////////////////		

								String[] row_tLogRow_9 = new String[4];

								if (row15.Team_Name != null) { //
									row_tLogRow_9[0] = String.valueOf(row15.Team_Name);

								} //

								if (row15.count != null) { //
									row_tLogRow_9[1] = String.valueOf(row15.count);

								} //

								if (row15.Player_Name != null) { //
									row_tLogRow_9[2] = String.valueOf(row15.Player_Name);

								} //

								if (row15.cap_count != null) { //
									row_tLogRow_9[3] = String.valueOf(row15.cap_count);

								} //

								util_tLogRow_9.addRow(row_tLogRow_9);
								nb_line_tLogRow_9++;
//////

//////                    

///////////////////////    			

								row17 = row15;

								tos_count_tLogRow_9++;

								/**
								 * [tLogRow_9 main ] stop
								 */

								/**
								 * [tLogRow_9 process_data_begin ] start
								 */

								currentComponent = "tLogRow_9";

								/**
								 * [tLogRow_9 process_data_begin ] stop
								 */

								/**
								 * [tSortRow_1_SortOut main ] start
								 */

								currentVirtualComponent = "tSortRow_1";

								currentComponent = "tSortRow_1_SortOut";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row17"

									);
								}

								Comparablerow17Struct arrayRowtSortRow_1_SortOut = new Comparablerow17Struct();

								arrayRowtSortRow_1_SortOut.Team_Name = row17.Team_Name;
								arrayRowtSortRow_1_SortOut.count = row17.count;
								arrayRowtSortRow_1_SortOut.Player_Name = row17.Player_Name;
								arrayRowtSortRow_1_SortOut.cap_count = row17.cap_count;
								list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

								tos_count_tSortRow_1_SortOut++;

								/**
								 * [tSortRow_1_SortOut main ] stop
								 */

								/**
								 * [tSortRow_1_SortOut process_data_begin ] start
								 */

								currentVirtualComponent = "tSortRow_1";

								currentComponent = "tSortRow_1_SortOut";

								/**
								 * [tSortRow_1_SortOut process_data_begin ] stop
								 */

								/**
								 * [tSortRow_1_SortOut process_data_end ] start
								 */

								currentVirtualComponent = "tSortRow_1";

								currentComponent = "tSortRow_1_SortOut";

								/**
								 * [tSortRow_1_SortOut process_data_end ] stop
								 */

								/**
								 * [tLogRow_9 process_data_end ] start
								 */

								currentComponent = "tLogRow_9";

								/**
								 * [tLogRow_9 process_data_end ] stop
								 */

							} // End of branch "row15"

// Start of branch "row16"
							if (row16 != null) {

								/**
								 * [tLogRow_10 main ] start
								 */

								currentComponent = "tLogRow_10";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row16"

									);
								}

///////////////////////		

								String[] row_tLogRow_10 = new String[5];

								if (row16.Team_Name != null) { //
									row_tLogRow_10[0] = String.valueOf(row16.Team_Name);

								} //

								if (row16.count != null) { //
									row_tLogRow_10[1] = String.valueOf(row16.count);

								} //

								if (row16.Player_Name != null) { //
									row_tLogRow_10[2] = String.valueOf(row16.Player_Name);

								} //

								if (row16.cap_count != null) { //
									row_tLogRow_10[3] = String.valueOf(row16.cap_count);

								} //

								if (row16.errorMessage != null) { //
									row_tLogRow_10[4] = String.valueOf(row16.errorMessage);

								} //

								util_tLogRow_10.addRow(row_tLogRow_10);
								nb_line_tLogRow_10++;
//////

//////                    

///////////////////////    			

								row18 = row16;

								tos_count_tLogRow_10++;

								/**
								 * [tLogRow_10 main ] stop
								 */

								/**
								 * [tLogRow_10 process_data_begin ] start
								 */

								currentComponent = "tLogRow_10";

								/**
								 * [tLogRow_10 process_data_begin ] stop
								 */

								/**
								 * [tSortRow_2_SortOut main ] start
								 */

								currentVirtualComponent = "tSortRow_2";

								currentComponent = "tSortRow_2_SortOut";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row18"

									);
								}

								Comparablerow18Struct arrayRowtSortRow_2_SortOut = new Comparablerow18Struct();

								arrayRowtSortRow_2_SortOut.Team_Name = row18.Team_Name;
								arrayRowtSortRow_2_SortOut.count = row18.count;
								arrayRowtSortRow_2_SortOut.Player_Name = row18.Player_Name;
								arrayRowtSortRow_2_SortOut.cap_count = row18.cap_count;
								arrayRowtSortRow_2_SortOut.errorMessage = row18.errorMessage;
								list_tSortRow_2_SortOut.add(arrayRowtSortRow_2_SortOut);

								tos_count_tSortRow_2_SortOut++;

								/**
								 * [tSortRow_2_SortOut main ] stop
								 */

								/**
								 * [tSortRow_2_SortOut process_data_begin ] start
								 */

								currentVirtualComponent = "tSortRow_2";

								currentComponent = "tSortRow_2_SortOut";

								/**
								 * [tSortRow_2_SortOut process_data_begin ] stop
								 */

								/**
								 * [tSortRow_2_SortOut process_data_end ] start
								 */

								currentVirtualComponent = "tSortRow_2";

								currentComponent = "tSortRow_2_SortOut";

								/**
								 * [tSortRow_2_SortOut process_data_end ] stop
								 */

								/**
								 * [tLogRow_10 process_data_end ] start
								 */

								currentComponent = "tLogRow_10";

								/**
								 * [tLogRow_10 process_data_end ] stop
								 */

							} // End of branch "row16"

							/**
							 * [tFilterRow_2 process_data_end ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_end ] stop
							 */

							/**
							 * [tLogRow_8 process_data_end ] start
							 */

							currentComponent = "tLogRow_8";

							/**
							 * [tLogRow_8 process_data_end ] stop
							 */

						} // End of branch "winners_captains"

					} // close loop of lookup 'row13' // G_TM_M_043

				} // G_TM_M_250 close loop read file data '1'

				/**
				 * [tMap_2_TMAP_IN process_data_end ] start
				 */

				currentVirtualComponent = "tMap_2";

				currentComponent = "tMap_2_TMAP_IN";

				/**
				 * [tMap_2_TMAP_IN process_data_end ] stop
				 */

				/**
				 * [tMap_2_TMAP_IN end ] start
				 */

				currentVirtualComponent = "tMap_2";

				currentComponent = "tMap_2_TMAP_IN";

// ###############################
// # Lookup hashes releasing
				fsi_tMap_2_1.endGet();

				if (tHash_Lookup_row13 != null) {
					tHash_Lookup_row13.endGet();
				}
				globalMap.remove("tHash_Lookup_row13");

// ###############################      

				ok_Hash.put("tMap_2_TMAP_IN", true);
				end_Hash.put("tMap_2_TMAP_IN", System.currentTimeMillis());

				/**
				 * [tMap_2_TMAP_IN end ] stop
				 */

				/**
				 * [tLogRow_8 end ] start
				 */

				currentComponent = "tLogRow_8";

//////

				java.io.PrintStream consoleOut_tLogRow_8 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_8 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_8);
				}

				consoleOut_tLogRow_8.println(util_tLogRow_8.format().toString());
				consoleOut_tLogRow_8.flush();
//////
				globalMap.put("tLogRow_8_NB_LINE", nb_line_tLogRow_8);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "winners_captains");
				}

				ok_Hash.put("tLogRow_8", true);
				end_Hash.put("tLogRow_8", System.currentTimeMillis());

				/**
				 * [tLogRow_8 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tLogRow_9 end ] start
				 */

				currentComponent = "tLogRow_9";

//////

				java.io.PrintStream consoleOut_tLogRow_9 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_9 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_9);
				}

				consoleOut_tLogRow_9.println(util_tLogRow_9.format().toString());
				consoleOut_tLogRow_9.flush();
//////
				globalMap.put("tLogRow_9_NB_LINE", nb_line_tLogRow_9);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tLogRow_9", true);
				end_Hash.put("tLogRow_9", System.currentTimeMillis());

				/**
				 * [tLogRow_9 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				row17Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow17Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tLogRow_11 begin ] start
				 */

				ok_Hash.put("tLogRow_11", false);
				start_Hash.put("tLogRow_11", System.currentTimeMillis());

				currentComponent = "tLogRow_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tLogRow_11 = 0;

				///////////////////////

				class Util_tLogRow_11 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[4];

					public void addRow(String[] row) {

						for (int i = 0; i < 4; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 3 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 3 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[3] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_11 util_tLogRow_11 = new Util_tLogRow_11();
				util_tLogRow_11.setTableName("tLogRow_11");
				util_tLogRow_11.addRow(new String[] { "Team_Name", "count", "Player_Name", "cap_count", });
				StringBuilder strBuffer_tLogRow_11 = null;
				int nb_line_tLogRow_11 = 0;
///////////////////////    			

				/**
				 * [tLogRow_11 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				row17Struct[] array_tSortRow_1_SortIn = (row17Struct[]) globalMap.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				row17Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row19.Team_Name = current_tSortRow_1_SortIn.Team_Name;
					row19.count = current_tSortRow_1_SortIn.count;
					row19.Player_Name = current_tSortRow_1_SortIn.Player_Name;
					row19.cap_count = current_tSortRow_1_SortIn.cap_count;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tLogRow_11 main ] start
					 */

					currentComponent = "tLogRow_11";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row19"

						);
					}

///////////////////////		

					String[] row_tLogRow_11 = new String[4];

					if (row19.Team_Name != null) { //
						row_tLogRow_11[0] = String.valueOf(row19.Team_Name);

					} //

					if (row19.count != null) { //
						row_tLogRow_11[1] = String.valueOf(row19.count);

					} //

					if (row19.Player_Name != null) { //
						row_tLogRow_11[2] = String.valueOf(row19.Player_Name);

					} //

					if (row19.cap_count != null) { //
						row_tLogRow_11[3] = String.valueOf(row19.cap_count);

					} //

					util_tLogRow_11.addRow(row_tLogRow_11);
					nb_line_tLogRow_11++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_11++;

					/**
					 * [tLogRow_11 main ] stop
					 */

					/**
					 * [tLogRow_11 process_data_begin ] start
					 */

					currentComponent = "tLogRow_11";

					/**
					 * [tLogRow_11 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_11 process_data_end ] start
					 */

					currentComponent = "tLogRow_11";

					/**
					 * [tLogRow_11 process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE", nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tLogRow_11 end ] start
				 */

				currentComponent = "tLogRow_11";

//////

				java.io.PrintStream consoleOut_tLogRow_11 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_11 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_11);
				}

				consoleOut_tLogRow_11.println(util_tLogRow_11.format().toString());
				consoleOut_tLogRow_11.flush();
//////
				globalMap.put("tLogRow_11_NB_LINE", nb_line_tLogRow_11);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tLogRow_11", true);
				end_Hash.put("tLogRow_11", System.currentTimeMillis());

				/**
				 * [tLogRow_11 end ] stop
				 */

				/**
				 * [tLogRow_10 end ] start
				 */

				currentComponent = "tLogRow_10";

//////

				java.io.PrintStream consoleOut_tLogRow_10 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_10 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_10);
				}

				consoleOut_tLogRow_10.println(util_tLogRow_10.format().toString());
				consoleOut_tLogRow_10.flush();
//////
				globalMap.put("tLogRow_10_NB_LINE", nb_line_tLogRow_10);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tLogRow_10", true);
				end_Hash.put("tLogRow_10", System.currentTimeMillis());

				/**
				 * [tLogRow_10 end ] stop
				 */

				/**
				 * [tSortRow_2_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				row18Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut.toArray(new Comparablerow18Struct[0]);

				java.util.Arrays.sort(array_tSortRow_2_SortOut);

				globalMap.put("tSortRow_2", array_tSortRow_2_SortOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tSortRow_2_SortOut", true);
				end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortOut end ] stop
				 */

				/**
				 * [tLogRow_12 begin ] start
				 */

				ok_Hash.put("tLogRow_12", false);
				start_Hash.put("tLogRow_12", System.currentTimeMillis());

				currentComponent = "tLogRow_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tLogRow_12 = 0;

				///////////////////////

				class Util_tLogRow_12 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_12 util_tLogRow_12 = new Util_tLogRow_12();
				util_tLogRow_12.setTableName("tLogRow_12");
				util_tLogRow_12
						.addRow(new String[] { "Team_Name", "count", "Player_Name", "cap_count", "errorMessage", });
				StringBuilder strBuffer_tLogRow_12 = null;
				int nb_line_tLogRow_12 = 0;
///////////////////////    			

				/**
				 * [tLogRow_12 begin ] stop
				 */

				/**
				 * [tSortRow_2_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_2_SortIn", false);
				start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				int tos_count_tSortRow_2_SortIn = 0;

				row18Struct[] array_tSortRow_2_SortIn = (row18Struct[]) globalMap.remove("tSortRow_2");

				int nb_line_tSortRow_2_SortIn = 0;

				row18Struct current_tSortRow_2_SortIn = null;

				for (int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++) {
					current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
					row20.Team_Name = current_tSortRow_2_SortIn.Team_Name;
					row20.count = current_tSortRow_2_SortIn.count;
					row20.Player_Name = current_tSortRow_2_SortIn.Player_Name;
					row20.cap_count = current_tSortRow_2_SortIn.cap_count;
					row20.errorMessage = current_tSortRow_2_SortIn.errorMessage;
					// increase number of line sorted
					nb_line_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_2_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					tos_count_tSortRow_2_SortIn++;

					/**
					 * [tSortRow_2_SortIn main ] stop
					 */

					/**
					 * [tSortRow_2_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					/**
					 * [tSortRow_2_SortIn process_data_begin ] stop
					 */

					/**
					 * [tLogRow_12 main ] start
					 */

					currentComponent = "tLogRow_12";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row20"

						);
					}

///////////////////////		

					String[] row_tLogRow_12 = new String[5];

					if (row20.Team_Name != null) { //
						row_tLogRow_12[0] = String.valueOf(row20.Team_Name);

					} //

					if (row20.count != null) { //
						row_tLogRow_12[1] = String.valueOf(row20.count);

					} //

					if (row20.Player_Name != null) { //
						row_tLogRow_12[2] = String.valueOf(row20.Player_Name);

					} //

					if (row20.cap_count != null) { //
						row_tLogRow_12[3] = String.valueOf(row20.cap_count);

					} //

					if (row20.errorMessage != null) { //
						row_tLogRow_12[4] = String.valueOf(row20.errorMessage);

					} //

					util_tLogRow_12.addRow(row_tLogRow_12);
					nb_line_tLogRow_12++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_12++;

					/**
					 * [tLogRow_12 main ] stop
					 */

					/**
					 * [tLogRow_12 process_data_begin ] start
					 */

					currentComponent = "tLogRow_12";

					/**
					 * [tLogRow_12 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_12 process_data_end ] start
					 */

					currentComponent = "tLogRow_12";

					/**
					 * [tLogRow_12 process_data_end ] stop
					 */

					/**
					 * [tSortRow_2_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

					/**
					 * [tSortRow_2_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_2_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_2";

					currentComponent = "tSortRow_2_SortIn";

				}

				globalMap.put("tSortRow_2_SortIn_NB_LINE", nb_line_tSortRow_2_SortIn);

				ok_Hash.put("tSortRow_2_SortIn", true);
				end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_2_SortIn end ] stop
				 */

				/**
				 * [tLogRow_12 end ] start
				 */

				currentComponent = "tLogRow_12";

//////

				java.io.PrintStream consoleOut_tLogRow_12 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_12 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_12 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_12);
				}

				consoleOut_tLogRow_12.println(util_tLogRow_12.format().toString());
				consoleOut_tLogRow_12.flush();
//////
				globalMap.put("tLogRow_12_NB_LINE", nb_line_tLogRow_12);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tLogRow_12", true);
				end_Hash.put("tLogRow_12", System.currentTimeMillis());

				/**
				 * [tLogRow_12 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_2_SortIn"
			globalMap.remove("tSortRow_2");

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tMap_1_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_OUT";

				/**
				 * [tMap_1_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_1_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_1";

				currentComponent = "tMap_1_TMAP_IN";

				/**
				 * [tMap_1_TMAP_IN finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tMap_2_TMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tMap_2";

				currentComponent = "tMap_2_TMAP_OUT";

				/**
				 * [tMap_2_TMAP_OUT finally ] stop
				 */

				/**
				 * [tMap_2_TMAP_IN finally ] start
				 */

				currentVirtualComponent = "tMap_2";

				currentComponent = "tMap_2_TMAP_IN";

				/**
				 * [tMap_2_TMAP_IN finally ] stop
				 */

				/**
				 * [tLogRow_8 finally ] start
				 */

				currentComponent = "tLogRow_8";

				/**
				 * [tLogRow_8 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tLogRow_9 finally ] start
				 */

				currentComponent = "tLogRow_9";

				/**
				 * [tLogRow_9 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tLogRow_11 finally ] start
				 */

				currentComponent = "tLogRow_11";

				/**
				 * [tLogRow_11 finally ] stop
				 */

				/**
				 * [tLogRow_10 finally ] start
				 */

				currentComponent = "tLogRow_10";

				/**
				 * [tLogRow_10 finally ] stop
				 */

				/**
				 * [tSortRow_2_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortOut";

				/**
				 * [tSortRow_2_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_2_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_2";

				currentComponent = "tSortRow_2_SortIn";

				/**
				 * [tSortRow_2_SortIn finally ] stop
				 */

				/**
				 * [tLogRow_12 finally ] start
				 */

				currentComponent = "tLogRow_12";

				/**
				 * [tLogRow_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String match_winner;

		public String getMatch_winner() {
			return this.match_winner;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.match_winner == null) ? 0 : this.match_winner.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.match_winner == null) {
				if (other.match_winner != null)
					return false;

			} else if (!this.match_winner.equals(other.match_winner))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.match_winner = this.match_winner;
			other.count = this.count;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.match_winner = this.match_winner;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.match_winner = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.match_winner = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.match_winner, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.match_winner, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.count = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.count = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.count, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.count, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("match_winner=" + match_winner);
			sb.append(",count=" + String.valueOf(count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.match_winner, other.match_winner);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String match_winner;

		public String getMatch_winner() {
			return this.match_winner;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.match_winner = readString(dis);

					this.count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.match_winner = readString(dis);

					this.count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.match_winner, dos);

				// Integer

				writeInteger(this.count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.match_winner, dos);

				// Integer

				writeInteger(this.count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("match_winner=" + match_winner);
			sb.append(",count=" + String.valueOf(count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String match_winner;

		public String getMatch_winner() {
			return this.match_winner;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.match_winner = readString(dis);

					this.count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.match_winner = readString(dis);

					this.count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.match_winner, dos);

				// Integer

				writeInteger(this.count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.match_winner, dos);

				// Integer

				writeInteger(this.count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("match_winner=" + match_winner);
			sb.append(",count=" + String.valueOf(count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer match_id;

		public Integer getMatch_id() {
			return this.match_id;
		}

		public String match_winner;

		public String getMatch_winner() {
			return this.match_winner;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.match_id = readInteger(dis);

					this.match_winner = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.match_id = readInteger(dis);

					this.match_winner = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.match_id, dos);

				// String

				writeString(this.match_winner, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.match_id, dos);

				// String

				writeString(this.match_winner, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("match_id=" + String.valueOf(match_id));
			sb.append(",match_winner=" + match_winner);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer Match_SK;

		public Integer getMatch_SK() {
			return this.Match_SK;
		}

		public Integer match_id;

		public Integer getMatch_id() {
			return this.match_id;
		}

		public String Team1;

		public String getTeam1() {
			return this.Team1;
		}

		public String Team2;

		public String getTeam2() {
			return this.Team2;
		}

		public String match_date;

		public String getMatch_date() {
			return this.match_date;
		}

		public Integer Season_Year;

		public Integer getSeason_Year() {
			return this.Season_Year;
		}

		public String Venue_Name;

		public String getVenue_Name() {
			return this.Venue_Name;
		}

		public String City_Name;

		public String getCity_Name() {
			return this.City_Name;
		}

		public String Country_Name;

		public String getCountry_Name() {
			return this.Country_Name;
		}

		public String Toss_Winner;

		public String getToss_Winner() {
			return this.Toss_Winner;
		}

		public String match_winner;

		public String getMatch_winner() {
			return this.match_winner;
		}

		public String Toss_Name;

		public String getToss_Name() {
			return this.Toss_Name;
		}

		public String Win_Type;

		public String getWin_Type() {
			return this.Win_Type;
		}

		public String Outcome_Type;

		public String getOutcome_Type() {
			return this.Outcome_Type;
		}

		public String ManOfMach;

		public String getManOfMach() {
			return this.ManOfMach;
		}

		public String Win_Margin;

		public String getWin_Margin() {
			return this.Win_Margin;
		}

		public Integer Country_id;

		public Integer getCountry_id() {
			return this.Country_id;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Match_SK = readInteger(dis);

					this.match_id = readInteger(dis);

					this.Team1 = readString(dis);

					this.Team2 = readString(dis);

					this.match_date = readString(dis);

					this.Season_Year = readInteger(dis);

					this.Venue_Name = readString(dis);

					this.City_Name = readString(dis);

					this.Country_Name = readString(dis);

					this.Toss_Winner = readString(dis);

					this.match_winner = readString(dis);

					this.Toss_Name = readString(dis);

					this.Win_Type = readString(dis);

					this.Outcome_Type = readString(dis);

					this.ManOfMach = readString(dis);

					this.Win_Margin = readString(dis);

					this.Country_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Match_SK = readInteger(dis);

					this.match_id = readInteger(dis);

					this.Team1 = readString(dis);

					this.Team2 = readString(dis);

					this.match_date = readString(dis);

					this.Season_Year = readInteger(dis);

					this.Venue_Name = readString(dis);

					this.City_Name = readString(dis);

					this.Country_Name = readString(dis);

					this.Toss_Winner = readString(dis);

					this.match_winner = readString(dis);

					this.Toss_Name = readString(dis);

					this.Win_Type = readString(dis);

					this.Outcome_Type = readString(dis);

					this.ManOfMach = readString(dis);

					this.Win_Margin = readString(dis);

					this.Country_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Match_SK, dos);

				// Integer

				writeInteger(this.match_id, dos);

				// String

				writeString(this.Team1, dos);

				// String

				writeString(this.Team2, dos);

				// String

				writeString(this.match_date, dos);

				// Integer

				writeInteger(this.Season_Year, dos);

				// String

				writeString(this.Venue_Name, dos);

				// String

				writeString(this.City_Name, dos);

				// String

				writeString(this.Country_Name, dos);

				// String

				writeString(this.Toss_Winner, dos);

				// String

				writeString(this.match_winner, dos);

				// String

				writeString(this.Toss_Name, dos);

				// String

				writeString(this.Win_Type, dos);

				// String

				writeString(this.Outcome_Type, dos);

				// String

				writeString(this.ManOfMach, dos);

				// String

				writeString(this.Win_Margin, dos);

				// Integer

				writeInteger(this.Country_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Match_SK, dos);

				// Integer

				writeInteger(this.match_id, dos);

				// String

				writeString(this.Team1, dos);

				// String

				writeString(this.Team2, dos);

				// String

				writeString(this.match_date, dos);

				// Integer

				writeInteger(this.Season_Year, dos);

				// String

				writeString(this.Venue_Name, dos);

				// String

				writeString(this.City_Name, dos);

				// String

				writeString(this.Country_Name, dos);

				// String

				writeString(this.Toss_Winner, dos);

				// String

				writeString(this.match_winner, dos);

				// String

				writeString(this.Toss_Name, dos);

				// String

				writeString(this.Win_Type, dos);

				// String

				writeString(this.Outcome_Type, dos);

				// String

				writeString(this.ManOfMach, dos);

				// String

				writeString(this.Win_Margin, dos);

				// Integer

				writeInteger(this.Country_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Match_SK=" + String.valueOf(Match_SK));
			sb.append(",match_id=" + String.valueOf(match_id));
			sb.append(",Team1=" + Team1);
			sb.append(",Team2=" + Team2);
			sb.append(",match_date=" + match_date);
			sb.append(",Season_Year=" + String.valueOf(Season_Year));
			sb.append(",Venue_Name=" + Venue_Name);
			sb.append(",City_Name=" + City_Name);
			sb.append(",Country_Name=" + Country_Name);
			sb.append(",Toss_Winner=" + Toss_Winner);
			sb.append(",match_winner=" + match_winner);
			sb.append(",Toss_Name=" + Toss_Name);
			sb.append(",Win_Type=" + Win_Type);
			sb.append(",Outcome_Type=" + Outcome_Type);
			sb.append(",ManOfMach=" + ManOfMach);
			sb.append(",Win_Margin=" + Win_Margin);
			sb.append(",Country_id=" + String.valueOf(Country_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row2Struct row4 = row2;
				row5Struct row5 = new row5Struct();
				row5Struct row6 = row5;

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String match_winner;
					int count = 0;
					int count_clmCount = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.match_winner == null) ? 0 : this.match_winner.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.match_winner == null) {
							if (other.match_winner != null)
								return false;
						} else if (!this.match_winner.equals(other.match_winner))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[2];

					public void addRow(String[] row) {

						for (int i = 0; i < 2; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 1 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[1] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("tLogRow_2");
				util_tLogRow_2.addRow(new String[] { "match_id", "match_winner", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */
						"D:/Current/Training/Cprime/Fidelity 2023/Content/Course Content/13 Data Integration/labs/Match.csv"/**
																															 * End
																															 * field
																															 * tFileInputDelimited_2:FILENAME
																															 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_2),
									fieldSeparator_tFileInputDelimited_2[0], "US-ASCII");
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();
								if (!(rowtFileInputDelimited_2.length == 1
										&& ("\015").equals(rowtFileInputDelimited_2[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
											: totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2
										? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_2),
										fieldSeparator_tFileInputDelimited_2[0], "US-ASCII");
							}
							csvReadertFileInputDelimited_2.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();

						if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row2.Match_SK = null;

								row2.match_id = null;

								row2.Team1 = null;

								row2.Team2 = null;

								row2.match_date = null;

								row2.Season_Year = null;

								row2.Venue_Name = null;

								row2.City_Name = null;

								row2.Country_Name = null;

								row2.Toss_Winner = null;

								row2.match_winner = null;

								row2.Toss_Name = null;

								row2.Win_Type = null;

								row2.Outcome_Type = null;

								row2.ManOfMach = null;

								row2.Win_Margin = null;

								row2.Country_id = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.Match_SK = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
													ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Match_SK", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.Match_SK = null;

									}

								} else {

									row2.Match_SK = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.match_id = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
													ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"match_id", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.match_id = null;

									}

								} else {

									row2.match_id = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Team1 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Team1 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Team2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Team2 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.match_date = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.match_date = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.Season_Year = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
													ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Season_Year", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.Season_Year = null;

									}

								} else {

									row2.Season_Year = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Venue_Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Venue_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.City_Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.City_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Country_Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Country_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Toss_Winner = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Toss_Winner = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.match_winner = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.match_winner = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Toss_Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Toss_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Win_Type = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Win_Type = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Outcome_Type = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Outcome_Type = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.ManOfMach = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.ManOfMach = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Win_Margin = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Win_Margin = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											row2.Country_id = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
													ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Country_id", "row2",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										row2.Country_id = null;

									}

								} else {

									row2.Country_id = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tLogRow_2 main ] start
							 */

							currentComponent = "tLogRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row2"

								);
							}

///////////////////////		

							String[] row_tLogRow_2 = new String[2];

							if (row2.match_id != null) { //
								row_tLogRow_2[0] = String.valueOf(row2.match_id);

							} //

							if (row2.match_winner != null) { //
								row_tLogRow_2[1] = String.valueOf(row2.match_winner);

							} //

							util_tLogRow_2.addRow(row_tLogRow_2);
							nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

							row4 = row2;

							tos_count_tLogRow_2++;

							/**
							 * [tLogRow_2 main ] stop
							 */

							/**
							 * [tLogRow_2 process_data_begin ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row4"

								);
							}

							operation_finder_tAggregateRow_1.match_winner = row4.match_winner;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.match_winner = operation_finder_tAggregateRow_1.match_winner;

								hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							if (row4.match_id != null) { // G_OutMain_AggR_546

								operation_result_tAggregateRow_1.count_clmCount++;
								operation_result_tAggregateRow_1.count++;

							} // G_OutMain_AggR_546

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] stop
							 */

							/**
							 * [tLogRow_2 process_data_end ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tLogRow_3 - inputs:(row5) outputs:(row6,row6) | target
				// node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_1 - inputs:(row3,row6) outputs:(winners)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row6Struct> tHash_Lookup_row6 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row6Struct>(
						matchingModeEnum_row6, "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/temp" + "/"
								+ jobName + "_tMapData_" + pid + "_Lookup_row6_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row6Struct createRowInstance() {
								return new row6Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row6.initPut();

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[2];

					public void addRow(String[] row) {

						for (int i = 0; i < 2; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 1 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[1] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
				util_tLogRow_3.setTableName("tLogRow_3");
				util_tLogRow_3.addRow(new String[] { "match_winner", "count", });
				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row5.match_winner = aggregated_row_tAggregateRow_1.match_winner;
					row5.count = (int) aggregated_row_tAggregateRow_1.count;
					row5.count = (int) aggregated_row_tAggregateRow_1.count_clmCount;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_3 main ] start
					 */

					currentComponent = "tLogRow_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row5"

						);
					}

///////////////////////		

					String[] row_tLogRow_3 = new String[2];

					if (row5.match_winner != null) { //
						row_tLogRow_3[0] = String.valueOf(row5.match_winner);

					} //

					if (row5.count != null) { //
						row_tLogRow_3[1] = String.valueOf(row5.count);

					} //

					util_tLogRow_3.addRow(row_tLogRow_3);
					nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

					row6 = row5;

					tos_count_tLogRow_3++;

					/**
					 * [tLogRow_3 main ] stop
					 */

					/**
					 * [tLogRow_3 process_data_begin ] start
					 */

					currentComponent = "tLogRow_3";

					/**
					 * [tLogRow_3 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row6 main ] start
					 */

					currentComponent = "tAdvancedHash_row6";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row6"

						);
					}

					row6Struct row6_HashRow = tHash_Lookup_row6.getNextFreeRow();

					row6_HashRow.match_winner = row6.match_winner;

					row6_HashRow.count = row6.count;

					tHash_Lookup_row6.put(row6_HashRow);

					tos_count_tAdvancedHash_row6++;

					/**
					 * [tAdvancedHash_row6 main ] stop
					 */

					/**
					 * [tAdvancedHash_row6 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row6";

					/**
					 * [tAdvancedHash_row6 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row6 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row6";

					/**
					 * [tAdvancedHash_row6 process_data_end ] stop
					 */

					/**
					 * [tLogRow_3 process_data_end ] start
					 */

					currentComponent = "tLogRow_3";

					/**
					 * [tLogRow_3 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
				consoleOut_tLogRow_3.flush();
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Player_team;

		public String getPlayer_team() {
			return this.Player_team;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Player_team == null) ? 0 : this.Player_team.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.Player_team == null) {
				if (other.Player_team != null)
					return false;

			} else if (!this.Player_team.equals(other.Player_team))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.Player_team = this.Player_team;
			other.Player_Name = this.Player_Name;
			other.cap_count = this.cap_count;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.Player_team = this.Player_team;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_team = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_team = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Player_team, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Player_team, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Player_Name = readString(dis, ois);

				this.cap_count = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Player_Name = readString(dis, objectIn);

				this.cap_count = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Player_Name, dos, oos);

				writeInteger(this.cap_count, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.Player_Name, dos, objectOut);

				writeInteger(this.cap_count, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Player_team=" + Player_team);
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Player_team, other.Player_team);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Player_team;

		public String getPlayer_team() {
			return this.Player_team;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_team = readString(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_team = readString(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Player_team=" + Player_team);
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public String Player_team;

		public String getPlayer_team() {
			return this.Player_team;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public Integer cap_count;

		public Integer getCap_count() {
			return this.cap_count;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_team = readString(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_team = readString(dis);

					this.Player_Name = readString(dis);

					this.cap_count = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Player_Name, dos);

				// Integer

				writeInteger(this.cap_count, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Player_team=" + Player_team);
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",cap_count=" + String.valueOf(cap_count));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer Player_match_SK;

		public Integer getPlayer_match_SK() {
			return this.Player_match_SK;
		}

		public String PlayerMatch_key;

		public String getPlayerMatch_key() {
			return this.PlayerMatch_key;
		}

		public Integer Match_Id;

		public Integer getMatch_Id() {
			return this.Match_Id;
		}

		public Integer Player_Id;

		public Integer getPlayer_Id() {
			return this.Player_Id;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public String DOB;

		public String getDOB() {
			return this.DOB;
		}

		public String Batting_hand;

		public String getBatting_hand() {
			return this.Batting_hand;
		}

		public String Bowling_skill;

		public String getBowling_skill() {
			return this.Bowling_skill;
		}

		public String Country_Name;

		public String getCountry_Name() {
			return this.Country_Name;
		}

		public String Role_Desc;

		public String getRole_Desc() {
			return this.Role_Desc;
		}

		public String Player_team;

		public String getPlayer_team() {
			return this.Player_team;
		}

		public String Opposit_Team;

		public String getOpposit_Team() {
			return this.Opposit_Team;
		}

		public String Season_year;

		public String getSeason_year() {
			return this.Season_year;
		}

		public String is_manofThematch;

		public String getIs_manofThematch() {
			return this.is_manofThematch;
		}

		public String Age_As_on_match;

		public String getAge_As_on_match() {
			return this.Age_As_on_match;
		}

		public String IsPlayers_Team_won;

		public String getIsPlayers_Team_won() {
			return this.IsPlayers_Team_won;
		}

		public String Batting_Status;

		public String getBatting_Status() {
			return this.Batting_Status;
		}

		public String Bowling_Status;

		public String getBowling_Status() {
			return this.Bowling_Status;
		}

		public String Player_Captain;

		public String getPlayer_Captain() {
			return this.Player_Captain;
		}

		public String Opposit_captain;

		public String getOpposit_captain() {
			return this.Opposit_captain;
		}

		public String Player_keeper;

		public String getPlayer_keeper() {
			return this.Player_keeper;
		}

		public String Opposit_keeper;

		public String getOpposit_keeper() {
			return this.Opposit_keeper;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_match_SK = readInteger(dis);

					this.PlayerMatch_key = readString(dis);

					this.Match_Id = readInteger(dis);

					this.Player_Id = readInteger(dis);

					this.Player_Name = readString(dis);

					this.DOB = readString(dis);

					this.Batting_hand = readString(dis);

					this.Bowling_skill = readString(dis);

					this.Country_Name = readString(dis);

					this.Role_Desc = readString(dis);

					this.Player_team = readString(dis);

					this.Opposit_Team = readString(dis);

					this.Season_year = readString(dis);

					this.is_manofThematch = readString(dis);

					this.Age_As_on_match = readString(dis);

					this.IsPlayers_Team_won = readString(dis);

					this.Batting_Status = readString(dis);

					this.Bowling_Status = readString(dis);

					this.Player_Captain = readString(dis);

					this.Opposit_captain = readString(dis);

					this.Player_keeper = readString(dis);

					this.Opposit_keeper = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_match_SK = readInteger(dis);

					this.PlayerMatch_key = readString(dis);

					this.Match_Id = readInteger(dis);

					this.Player_Id = readInteger(dis);

					this.Player_Name = readString(dis);

					this.DOB = readString(dis);

					this.Batting_hand = readString(dis);

					this.Bowling_skill = readString(dis);

					this.Country_Name = readString(dis);

					this.Role_Desc = readString(dis);

					this.Player_team = readString(dis);

					this.Opposit_Team = readString(dis);

					this.Season_year = readString(dis);

					this.is_manofThematch = readString(dis);

					this.Age_As_on_match = readString(dis);

					this.IsPlayers_Team_won = readString(dis);

					this.Batting_Status = readString(dis);

					this.Bowling_Status = readString(dis);

					this.Player_Captain = readString(dis);

					this.Opposit_captain = readString(dis);

					this.Player_keeper = readString(dis);

					this.Opposit_keeper = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Player_match_SK, dos);

				// String

				writeString(this.PlayerMatch_key, dos);

				// Integer

				writeInteger(this.Match_Id, dos);

				// Integer

				writeInteger(this.Player_Id, dos);

				// String

				writeString(this.Player_Name, dos);

				// String

				writeString(this.DOB, dos);

				// String

				writeString(this.Batting_hand, dos);

				// String

				writeString(this.Bowling_skill, dos);

				// String

				writeString(this.Country_Name, dos);

				// String

				writeString(this.Role_Desc, dos);

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Opposit_Team, dos);

				// String

				writeString(this.Season_year, dos);

				// String

				writeString(this.is_manofThematch, dos);

				// String

				writeString(this.Age_As_on_match, dos);

				// String

				writeString(this.IsPlayers_Team_won, dos);

				// String

				writeString(this.Batting_Status, dos);

				// String

				writeString(this.Bowling_Status, dos);

				// String

				writeString(this.Player_Captain, dos);

				// String

				writeString(this.Opposit_captain, dos);

				// String

				writeString(this.Player_keeper, dos);

				// String

				writeString(this.Opposit_keeper, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Player_match_SK, dos);

				// String

				writeString(this.PlayerMatch_key, dos);

				// Integer

				writeInteger(this.Match_Id, dos);

				// Integer

				writeInteger(this.Player_Id, dos);

				// String

				writeString(this.Player_Name, dos);

				// String

				writeString(this.DOB, dos);

				// String

				writeString(this.Batting_hand, dos);

				// String

				writeString(this.Bowling_skill, dos);

				// String

				writeString(this.Country_Name, dos);

				// String

				writeString(this.Role_Desc, dos);

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Opposit_Team, dos);

				// String

				writeString(this.Season_year, dos);

				// String

				writeString(this.is_manofThematch, dos);

				// String

				writeString(this.Age_As_on_match, dos);

				// String

				writeString(this.IsPlayers_Team_won, dos);

				// String

				writeString(this.Batting_Status, dos);

				// String

				writeString(this.Bowling_Status, dos);

				// String

				writeString(this.Player_Captain, dos);

				// String

				writeString(this.Opposit_captain, dos);

				// String

				writeString(this.Player_keeper, dos);

				// String

				writeString(this.Opposit_keeper, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Player_match_SK=" + String.valueOf(Player_match_SK));
			sb.append(",PlayerMatch_key=" + PlayerMatch_key);
			sb.append(",Match_Id=" + String.valueOf(Match_Id));
			sb.append(",Player_Id=" + String.valueOf(Player_Id));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",DOB=" + DOB);
			sb.append(",Batting_hand=" + Batting_hand);
			sb.append(",Bowling_skill=" + Bowling_skill);
			sb.append(",Country_Name=" + Country_Name);
			sb.append(",Role_Desc=" + Role_Desc);
			sb.append(",Player_team=" + Player_team);
			sb.append(",Opposit_Team=" + Opposit_Team);
			sb.append(",Season_year=" + Season_year);
			sb.append(",is_manofThematch=" + is_manofThematch);
			sb.append(",Age_As_on_match=" + Age_As_on_match);
			sb.append(",IsPlayers_Team_won=" + IsPlayers_Team_won);
			sb.append(",Batting_Status=" + Batting_Status);
			sb.append(",Bowling_Status=" + Bowling_Status);
			sb.append(",Player_Captain=" + Player_Captain);
			sb.append(",Opposit_captain=" + Opposit_captain);
			sb.append(",Player_keeper=" + Player_keeper);
			sb.append(",Opposit_keeper=" + Opposit_keeper);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer Player_match_SK;

		public Integer getPlayer_match_SK() {
			return this.Player_match_SK;
		}

		public String PlayerMatch_key;

		public String getPlayerMatch_key() {
			return this.PlayerMatch_key;
		}

		public Integer Match_Id;

		public Integer getMatch_Id() {
			return this.Match_Id;
		}

		public Integer Player_Id;

		public Integer getPlayer_Id() {
			return this.Player_Id;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public String DOB;

		public String getDOB() {
			return this.DOB;
		}

		public String Batting_hand;

		public String getBatting_hand() {
			return this.Batting_hand;
		}

		public String Bowling_skill;

		public String getBowling_skill() {
			return this.Bowling_skill;
		}

		public String Country_Name;

		public String getCountry_Name() {
			return this.Country_Name;
		}

		public String Role_Desc;

		public String getRole_Desc() {
			return this.Role_Desc;
		}

		public String Player_team;

		public String getPlayer_team() {
			return this.Player_team;
		}

		public String Opposit_Team;

		public String getOpposit_Team() {
			return this.Opposit_Team;
		}

		public String Season_year;

		public String getSeason_year() {
			return this.Season_year;
		}

		public String is_manofThematch;

		public String getIs_manofThematch() {
			return this.is_manofThematch;
		}

		public String Age_As_on_match;

		public String getAge_As_on_match() {
			return this.Age_As_on_match;
		}

		public String IsPlayers_Team_won;

		public String getIsPlayers_Team_won() {
			return this.IsPlayers_Team_won;
		}

		public String Batting_Status;

		public String getBatting_Status() {
			return this.Batting_Status;
		}

		public String Bowling_Status;

		public String getBowling_Status() {
			return this.Bowling_Status;
		}

		public String Player_Captain;

		public String getPlayer_Captain() {
			return this.Player_Captain;
		}

		public String Opposit_captain;

		public String getOpposit_captain() {
			return this.Opposit_captain;
		}

		public String Player_keeper;

		public String getPlayer_keeper() {
			return this.Player_keeper;
		}

		public String Opposit_keeper;

		public String getOpposit_keeper() {
			return this.Opposit_keeper;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_match_SK = readInteger(dis);

					this.PlayerMatch_key = readString(dis);

					this.Match_Id = readInteger(dis);

					this.Player_Id = readInteger(dis);

					this.Player_Name = readString(dis);

					this.DOB = readString(dis);

					this.Batting_hand = readString(dis);

					this.Bowling_skill = readString(dis);

					this.Country_Name = readString(dis);

					this.Role_Desc = readString(dis);

					this.Player_team = readString(dis);

					this.Opposit_Team = readString(dis);

					this.Season_year = readString(dis);

					this.is_manofThematch = readString(dis);

					this.Age_As_on_match = readString(dis);

					this.IsPlayers_Team_won = readString(dis);

					this.Batting_Status = readString(dis);

					this.Bowling_Status = readString(dis);

					this.Player_Captain = readString(dis);

					this.Opposit_captain = readString(dis);

					this.Player_keeper = readString(dis);

					this.Opposit_keeper = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_match_SK = readInteger(dis);

					this.PlayerMatch_key = readString(dis);

					this.Match_Id = readInteger(dis);

					this.Player_Id = readInteger(dis);

					this.Player_Name = readString(dis);

					this.DOB = readString(dis);

					this.Batting_hand = readString(dis);

					this.Bowling_skill = readString(dis);

					this.Country_Name = readString(dis);

					this.Role_Desc = readString(dis);

					this.Player_team = readString(dis);

					this.Opposit_Team = readString(dis);

					this.Season_year = readString(dis);

					this.is_manofThematch = readString(dis);

					this.Age_As_on_match = readString(dis);

					this.IsPlayers_Team_won = readString(dis);

					this.Batting_Status = readString(dis);

					this.Bowling_Status = readString(dis);

					this.Player_Captain = readString(dis);

					this.Opposit_captain = readString(dis);

					this.Player_keeper = readString(dis);

					this.Opposit_keeper = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Player_match_SK, dos);

				// String

				writeString(this.PlayerMatch_key, dos);

				// Integer

				writeInteger(this.Match_Id, dos);

				// Integer

				writeInteger(this.Player_Id, dos);

				// String

				writeString(this.Player_Name, dos);

				// String

				writeString(this.DOB, dos);

				// String

				writeString(this.Batting_hand, dos);

				// String

				writeString(this.Bowling_skill, dos);

				// String

				writeString(this.Country_Name, dos);

				// String

				writeString(this.Role_Desc, dos);

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Opposit_Team, dos);

				// String

				writeString(this.Season_year, dos);

				// String

				writeString(this.is_manofThematch, dos);

				// String

				writeString(this.Age_As_on_match, dos);

				// String

				writeString(this.IsPlayers_Team_won, dos);

				// String

				writeString(this.Batting_Status, dos);

				// String

				writeString(this.Bowling_Status, dos);

				// String

				writeString(this.Player_Captain, dos);

				// String

				writeString(this.Opposit_captain, dos);

				// String

				writeString(this.Player_keeper, dos);

				// String

				writeString(this.Opposit_keeper, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Player_match_SK, dos);

				// String

				writeString(this.PlayerMatch_key, dos);

				// Integer

				writeInteger(this.Match_Id, dos);

				// Integer

				writeInteger(this.Player_Id, dos);

				// String

				writeString(this.Player_Name, dos);

				// String

				writeString(this.DOB, dos);

				// String

				writeString(this.Batting_hand, dos);

				// String

				writeString(this.Bowling_skill, dos);

				// String

				writeString(this.Country_Name, dos);

				// String

				writeString(this.Role_Desc, dos);

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Opposit_Team, dos);

				// String

				writeString(this.Season_year, dos);

				// String

				writeString(this.is_manofThematch, dos);

				// String

				writeString(this.Age_As_on_match, dos);

				// String

				writeString(this.IsPlayers_Team_won, dos);

				// String

				writeString(this.Batting_Status, dos);

				// String

				writeString(this.Bowling_Status, dos);

				// String

				writeString(this.Player_Captain, dos);

				// String

				writeString(this.Opposit_captain, dos);

				// String

				writeString(this.Player_keeper, dos);

				// String

				writeString(this.Opposit_keeper, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Player_match_SK=" + String.valueOf(Player_match_SK));
			sb.append(",PlayerMatch_key=" + PlayerMatch_key);
			sb.append(",Match_Id=" + String.valueOf(Match_Id));
			sb.append(",Player_Id=" + String.valueOf(Player_Id));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",DOB=" + DOB);
			sb.append(",Batting_hand=" + Batting_hand);
			sb.append(",Bowling_skill=" + Bowling_skill);
			sb.append(",Country_Name=" + Country_Name);
			sb.append(",Role_Desc=" + Role_Desc);
			sb.append(",Player_team=" + Player_team);
			sb.append(",Opposit_Team=" + Opposit_Team);
			sb.append(",Season_year=" + Season_year);
			sb.append(",is_manofThematch=" + is_manofThematch);
			sb.append(",Age_As_on_match=" + Age_As_on_match);
			sb.append(",IsPlayers_Team_won=" + IsPlayers_Team_won);
			sb.append(",Batting_Status=" + Batting_Status);
			sb.append(",Bowling_Status=" + Bowling_Status);
			sb.append(",Player_Captain=" + Player_Captain);
			sb.append(",Opposit_captain=" + Opposit_captain);
			sb.append(",Player_keeper=" + Player_keeper);
			sb.append(",Opposit_keeper=" + Opposit_keeper);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer Player_match_SK;

		public Integer getPlayer_match_SK() {
			return this.Player_match_SK;
		}

		public String PlayerMatch_key;

		public String getPlayerMatch_key() {
			return this.PlayerMatch_key;
		}

		public Integer Match_Id;

		public Integer getMatch_Id() {
			return this.Match_Id;
		}

		public Integer Player_Id;

		public Integer getPlayer_Id() {
			return this.Player_Id;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public String DOB;

		public String getDOB() {
			return this.DOB;
		}

		public String Batting_hand;

		public String getBatting_hand() {
			return this.Batting_hand;
		}

		public String Bowling_skill;

		public String getBowling_skill() {
			return this.Bowling_skill;
		}

		public String Country_Name;

		public String getCountry_Name() {
			return this.Country_Name;
		}

		public String Role_Desc;

		public String getRole_Desc() {
			return this.Role_Desc;
		}

		public String Player_team;

		public String getPlayer_team() {
			return this.Player_team;
		}

		public String Opposit_Team;

		public String getOpposit_Team() {
			return this.Opposit_Team;
		}

		public String Season_year;

		public String getSeason_year() {
			return this.Season_year;
		}

		public String is_manofThematch;

		public String getIs_manofThematch() {
			return this.is_manofThematch;
		}

		public String Age_As_on_match;

		public String getAge_As_on_match() {
			return this.Age_As_on_match;
		}

		public String IsPlayers_Team_won;

		public String getIsPlayers_Team_won() {
			return this.IsPlayers_Team_won;
		}

		public String Batting_Status;

		public String getBatting_Status() {
			return this.Batting_Status;
		}

		public String Bowling_Status;

		public String getBowling_Status() {
			return this.Bowling_Status;
		}

		public String Player_Captain;

		public String getPlayer_Captain() {
			return this.Player_Captain;
		}

		public String Opposit_captain;

		public String getOpposit_captain() {
			return this.Opposit_captain;
		}

		public String Player_keeper;

		public String getPlayer_keeper() {
			return this.Player_keeper;
		}

		public String Opposit_keeper;

		public String getOpposit_keeper() {
			return this.Opposit_keeper;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_match_SK = readInteger(dis);

					this.PlayerMatch_key = readString(dis);

					this.Match_Id = readInteger(dis);

					this.Player_Id = readInteger(dis);

					this.Player_Name = readString(dis);

					this.DOB = readString(dis);

					this.Batting_hand = readString(dis);

					this.Bowling_skill = readString(dis);

					this.Country_Name = readString(dis);

					this.Role_Desc = readString(dis);

					this.Player_team = readString(dis);

					this.Opposit_Team = readString(dis);

					this.Season_year = readString(dis);

					this.is_manofThematch = readString(dis);

					this.Age_As_on_match = readString(dis);

					this.IsPlayers_Team_won = readString(dis);

					this.Batting_Status = readString(dis);

					this.Bowling_Status = readString(dis);

					this.Player_Captain = readString(dis);

					this.Opposit_captain = readString(dis);

					this.Player_keeper = readString(dis);

					this.Opposit_keeper = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_match_SK = readInteger(dis);

					this.PlayerMatch_key = readString(dis);

					this.Match_Id = readInteger(dis);

					this.Player_Id = readInteger(dis);

					this.Player_Name = readString(dis);

					this.DOB = readString(dis);

					this.Batting_hand = readString(dis);

					this.Bowling_skill = readString(dis);

					this.Country_Name = readString(dis);

					this.Role_Desc = readString(dis);

					this.Player_team = readString(dis);

					this.Opposit_Team = readString(dis);

					this.Season_year = readString(dis);

					this.is_manofThematch = readString(dis);

					this.Age_As_on_match = readString(dis);

					this.IsPlayers_Team_won = readString(dis);

					this.Batting_Status = readString(dis);

					this.Bowling_Status = readString(dis);

					this.Player_Captain = readString(dis);

					this.Opposit_captain = readString(dis);

					this.Player_keeper = readString(dis);

					this.Opposit_keeper = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Player_match_SK, dos);

				// String

				writeString(this.PlayerMatch_key, dos);

				// Integer

				writeInteger(this.Match_Id, dos);

				// Integer

				writeInteger(this.Player_Id, dos);

				// String

				writeString(this.Player_Name, dos);

				// String

				writeString(this.DOB, dos);

				// String

				writeString(this.Batting_hand, dos);

				// String

				writeString(this.Bowling_skill, dos);

				// String

				writeString(this.Country_Name, dos);

				// String

				writeString(this.Role_Desc, dos);

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Opposit_Team, dos);

				// String

				writeString(this.Season_year, dos);

				// String

				writeString(this.is_manofThematch, dos);

				// String

				writeString(this.Age_As_on_match, dos);

				// String

				writeString(this.IsPlayers_Team_won, dos);

				// String

				writeString(this.Batting_Status, dos);

				// String

				writeString(this.Bowling_Status, dos);

				// String

				writeString(this.Player_Captain, dos);

				// String

				writeString(this.Opposit_captain, dos);

				// String

				writeString(this.Player_keeper, dos);

				// String

				writeString(this.Opposit_keeper, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Player_match_SK, dos);

				// String

				writeString(this.PlayerMatch_key, dos);

				// Integer

				writeInteger(this.Match_Id, dos);

				// Integer

				writeInteger(this.Player_Id, dos);

				// String

				writeString(this.Player_Name, dos);

				// String

				writeString(this.DOB, dos);

				// String

				writeString(this.Batting_hand, dos);

				// String

				writeString(this.Bowling_skill, dos);

				// String

				writeString(this.Country_Name, dos);

				// String

				writeString(this.Role_Desc, dos);

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Opposit_Team, dos);

				// String

				writeString(this.Season_year, dos);

				// String

				writeString(this.is_manofThematch, dos);

				// String

				writeString(this.Age_As_on_match, dos);

				// String

				writeString(this.IsPlayers_Team_won, dos);

				// String

				writeString(this.Batting_Status, dos);

				// String

				writeString(this.Bowling_Status, dos);

				// String

				writeString(this.Player_Captain, dos);

				// String

				writeString(this.Opposit_captain, dos);

				// String

				writeString(this.Player_keeper, dos);

				// String

				writeString(this.Opposit_keeper, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Player_match_SK=" + String.valueOf(Player_match_SK));
			sb.append(",PlayerMatch_key=" + PlayerMatch_key);
			sb.append(",Match_Id=" + String.valueOf(Match_Id));
			sb.append(",Player_Id=" + String.valueOf(Player_Id));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",DOB=" + DOB);
			sb.append(",Batting_hand=" + Batting_hand);
			sb.append(",Bowling_skill=" + Bowling_skill);
			sb.append(",Country_Name=" + Country_Name);
			sb.append(",Role_Desc=" + Role_Desc);
			sb.append(",Player_team=" + Player_team);
			sb.append(",Opposit_Team=" + Opposit_Team);
			sb.append(",Season_year=" + Season_year);
			sb.append(",is_manofThematch=" + is_manofThematch);
			sb.append(",Age_As_on_match=" + Age_As_on_match);
			sb.append(",IsPlayers_Team_won=" + IsPlayers_Team_won);
			sb.append(",Batting_Status=" + Batting_Status);
			sb.append(",Bowling_Status=" + Bowling_Status);
			sb.append(",Player_Captain=" + Player_Captain);
			sb.append(",Opposit_captain=" + Opposit_captain);
			sb.append(",Player_keeper=" + Player_keeper);
			sb.append(",Opposit_keeper=" + Opposit_keeper);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_BASE_cricket5 = new byte[0];
		static byte[] commonByteArray_BASE_cricket5 = new byte[0];

		public Integer Player_match_SK;

		public Integer getPlayer_match_SK() {
			return this.Player_match_SK;
		}

		public String PlayerMatch_key;

		public String getPlayerMatch_key() {
			return this.PlayerMatch_key;
		}

		public Integer Match_Id;

		public Integer getMatch_Id() {
			return this.Match_Id;
		}

		public Integer Player_Id;

		public Integer getPlayer_Id() {
			return this.Player_Id;
		}

		public String Player_Name;

		public String getPlayer_Name() {
			return this.Player_Name;
		}

		public String DOB;

		public String getDOB() {
			return this.DOB;
		}

		public String Batting_hand;

		public String getBatting_hand() {
			return this.Batting_hand;
		}

		public String Bowling_skill;

		public String getBowling_skill() {
			return this.Bowling_skill;
		}

		public String Country_Name;

		public String getCountry_Name() {
			return this.Country_Name;
		}

		public String Role_Desc;

		public String getRole_Desc() {
			return this.Role_Desc;
		}

		public String Player_team;

		public String getPlayer_team() {
			return this.Player_team;
		}

		public String Opposit_Team;

		public String getOpposit_Team() {
			return this.Opposit_Team;
		}

		public String Season_year;

		public String getSeason_year() {
			return this.Season_year;
		}

		public String is_manofThematch;

		public String getIs_manofThematch() {
			return this.is_manofThematch;
		}

		public String Age_As_on_match;

		public String getAge_As_on_match() {
			return this.Age_As_on_match;
		}

		public String IsPlayers_Team_won;

		public String getIsPlayers_Team_won() {
			return this.IsPlayers_Team_won;
		}

		public String Batting_Status;

		public String getBatting_Status() {
			return this.Batting_Status;
		}

		public String Bowling_Status;

		public String getBowling_Status() {
			return this.Bowling_Status;
		}

		public String Player_Captain;

		public String getPlayer_Captain() {
			return this.Player_Captain;
		}

		public String Opposit_captain;

		public String getOpposit_captain() {
			return this.Opposit_captain;
		}

		public String Player_keeper;

		public String getPlayer_keeper() {
			return this.Player_keeper;
		}

		public String Opposit_keeper;

		public String getOpposit_keeper() {
			return this.Opposit_keeper;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BASE_cricket5.length) {
					if (length < 1024 && commonByteArray_BASE_cricket5.length == 0) {
						commonByteArray_BASE_cricket5 = new byte[1024];
					} else {
						commonByteArray_BASE_cricket5 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_BASE_cricket5, 0, length);
				strReturn = new String(commonByteArray_BASE_cricket5, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_match_SK = readInteger(dis);

					this.PlayerMatch_key = readString(dis);

					this.Match_Id = readInteger(dis);

					this.Player_Id = readInteger(dis);

					this.Player_Name = readString(dis);

					this.DOB = readString(dis);

					this.Batting_hand = readString(dis);

					this.Bowling_skill = readString(dis);

					this.Country_Name = readString(dis);

					this.Role_Desc = readString(dis);

					this.Player_team = readString(dis);

					this.Opposit_Team = readString(dis);

					this.Season_year = readString(dis);

					this.is_manofThematch = readString(dis);

					this.Age_As_on_match = readString(dis);

					this.IsPlayers_Team_won = readString(dis);

					this.Batting_Status = readString(dis);

					this.Bowling_Status = readString(dis);

					this.Player_Captain = readString(dis);

					this.Opposit_captain = readString(dis);

					this.Player_keeper = readString(dis);

					this.Opposit_keeper = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_BASE_cricket5) {

				try {

					int length = 0;

					this.Player_match_SK = readInteger(dis);

					this.PlayerMatch_key = readString(dis);

					this.Match_Id = readInteger(dis);

					this.Player_Id = readInteger(dis);

					this.Player_Name = readString(dis);

					this.DOB = readString(dis);

					this.Batting_hand = readString(dis);

					this.Bowling_skill = readString(dis);

					this.Country_Name = readString(dis);

					this.Role_Desc = readString(dis);

					this.Player_team = readString(dis);

					this.Opposit_Team = readString(dis);

					this.Season_year = readString(dis);

					this.is_manofThematch = readString(dis);

					this.Age_As_on_match = readString(dis);

					this.IsPlayers_Team_won = readString(dis);

					this.Batting_Status = readString(dis);

					this.Bowling_Status = readString(dis);

					this.Player_Captain = readString(dis);

					this.Opposit_captain = readString(dis);

					this.Player_keeper = readString(dis);

					this.Opposit_keeper = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Player_match_SK, dos);

				// String

				writeString(this.PlayerMatch_key, dos);

				// Integer

				writeInteger(this.Match_Id, dos);

				// Integer

				writeInteger(this.Player_Id, dos);

				// String

				writeString(this.Player_Name, dos);

				// String

				writeString(this.DOB, dos);

				// String

				writeString(this.Batting_hand, dos);

				// String

				writeString(this.Bowling_skill, dos);

				// String

				writeString(this.Country_Name, dos);

				// String

				writeString(this.Role_Desc, dos);

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Opposit_Team, dos);

				// String

				writeString(this.Season_year, dos);

				// String

				writeString(this.is_manofThematch, dos);

				// String

				writeString(this.Age_As_on_match, dos);

				// String

				writeString(this.IsPlayers_Team_won, dos);

				// String

				writeString(this.Batting_Status, dos);

				// String

				writeString(this.Bowling_Status, dos);

				// String

				writeString(this.Player_Captain, dos);

				// String

				writeString(this.Opposit_captain, dos);

				// String

				writeString(this.Player_keeper, dos);

				// String

				writeString(this.Opposit_keeper, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Player_match_SK, dos);

				// String

				writeString(this.PlayerMatch_key, dos);

				// Integer

				writeInteger(this.Match_Id, dos);

				// Integer

				writeInteger(this.Player_Id, dos);

				// String

				writeString(this.Player_Name, dos);

				// String

				writeString(this.DOB, dos);

				// String

				writeString(this.Batting_hand, dos);

				// String

				writeString(this.Bowling_skill, dos);

				// String

				writeString(this.Country_Name, dos);

				// String

				writeString(this.Role_Desc, dos);

				// String

				writeString(this.Player_team, dos);

				// String

				writeString(this.Opposit_Team, dos);

				// String

				writeString(this.Season_year, dos);

				// String

				writeString(this.is_manofThematch, dos);

				// String

				writeString(this.Age_As_on_match, dos);

				// String

				writeString(this.IsPlayers_Team_won, dos);

				// String

				writeString(this.Batting_Status, dos);

				// String

				writeString(this.Bowling_Status, dos);

				// String

				writeString(this.Player_Captain, dos);

				// String

				writeString(this.Opposit_captain, dos);

				// String

				writeString(this.Player_keeper, dos);

				// String

				writeString(this.Opposit_keeper, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Player_match_SK=" + String.valueOf(Player_match_SK));
			sb.append(",PlayerMatch_key=" + PlayerMatch_key);
			sb.append(",Match_Id=" + String.valueOf(Match_Id));
			sb.append(",Player_Id=" + String.valueOf(Player_Id));
			sb.append(",Player_Name=" + Player_Name);
			sb.append(",DOB=" + DOB);
			sb.append(",Batting_hand=" + Batting_hand);
			sb.append(",Bowling_skill=" + Bowling_skill);
			sb.append(",Country_Name=" + Country_Name);
			sb.append(",Role_Desc=" + Role_Desc);
			sb.append(",Player_team=" + Player_team);
			sb.append(",Opposit_Team=" + Opposit_Team);
			sb.append(",Season_year=" + Season_year);
			sb.append(",is_manofThematch=" + is_manofThematch);
			sb.append(",Age_As_on_match=" + Age_As_on_match);
			sb.append(",IsPlayers_Team_won=" + IsPlayers_Team_won);
			sb.append(",Batting_Status=" + Batting_Status);
			sb.append(",Bowling_Status=" + Bowling_Status);
			sb.append(",Player_Captain=" + Player_Captain);
			sb.append(",Opposit_captain=" + Opposit_captain);
			sb.append(",Player_keeper=" + Player_keeper);
			sb.append(",Opposit_keeper=" + Opposit_keeper);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row7Struct row8 = row7;
				row9Struct row9 = new row9Struct();
				row9Struct row10 = row9;
				row11Struct row11 = new row11Struct();
				row11Struct row13 = row11;

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tAggregateRow_2_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Player_Name;
					String Player_team;
					int count = 0;
					int cap_count_clmCount = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Player_Name == null) ? 0 : this.Player_Name.hashCode());

							result = prime * result + ((this.Player_team == null) ? 0 : this.Player_team.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.Player_Name == null) {
							if (other.Player_Name != null)
								return false;
						} else if (!this.Player_Name.equals(other.Player_Name))
							return false;

						if (this.Player_team == null) {
							if (other.Player_team != null)
								return false;
						} else if (!this.Player_team.equals(other.Player_team))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tLogRow_6 begin ] start
				 */

				ok_Hash.put("tLogRow_6", false);
				start_Hash.put("tLogRow_6", System.currentTimeMillis());

				currentComponent = "tLogRow_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tLogRow_6 = 0;

				///////////////////////

				class Util_tLogRow_6 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[22];

					public void addRow(String[] row) {

						for (int i = 0; i < 22; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 21 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 21 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[21] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_6 util_tLogRow_6 = new Util_tLogRow_6();
				util_tLogRow_6.setTableName("tLogRow_6");
				util_tLogRow_6.addRow(new String[] { "Player_match_SK", "PlayerMatch_key", "Match_Id", "Player_Id",
						"Player_Name", "DOB", "Batting_hand", "Bowling_skill", "Country_Name", "Role_Desc",
						"Player_team", "Opposit_Team", "Season_year", "is_manofThematch", "Age_As_on_match",
						"IsPlayers_Team_won", "Batting_Status", "Bowling_Status", "Player_Captain", "Opposit_captain",
						"Player_keeper", "Opposit_keeper", });
				StringBuilder strBuffer_tLogRow_6 = null;
				int nb_line_tLogRow_6 = 0;
///////////////////////    			

				/**
				 * [tLogRow_6 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				class Util_tLogRow_5 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[22];

					public void addRow(String[] row) {

						for (int i = 0; i < 22; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 21 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 21 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[21] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();
				util_tLogRow_5.setTableName("tLogRow_5");
				util_tLogRow_5.addRow(new String[] { "Player_match_SK", "PlayerMatch_key", "Match_Id", "Player_Id",
						"Player_Name", "DOB", "Batting_hand", "Bowling_skill", "Country_Name", "Role_Desc",
						"Player_team", "Opposit_Team", "Season_year", "is_manofThematch", "Age_As_on_match",
						"IsPlayers_Team_won", "Batting_Status", "Bowling_Status", "Player_Captain", "Opposit_captain",
						"Player_keeper", "Opposit_keeper", });
				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */
						"D:/Current/Training/Cprime/Fidelity 2023/Content/Course Content/13 Data Integration/labs/Player_match.csv"/**
																																	 * End
																																	 * field
																																	 * tFileInputDelimited_3:FILENAME
																																	 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_3),
									fieldSeparator_tFileInputDelimited_3[0], "US-ASCII");
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3.getValues();
								if (!(rowtFileInputDelimited_3.length == 1
										&& ("\015").equals(rowtFileInputDelimited_3[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
											: totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3
										? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_3),
										fieldSeparator_tFileInputDelimited_3[0], "US-ASCII");
							}
							csvReadertFileInputDelimited_3.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3.getValues();

						if (rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row7 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row7 = new row7Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row7.Player_match_SK = null;

								row7.PlayerMatch_key = null;

								row7.Match_Id = null;

								row7.Player_Id = null;

								row7.Player_Name = null;

								row7.DOB = null;

								row7.Batting_hand = null;

								row7.Bowling_skill = null;

								row7.Country_Name = null;

								row7.Role_Desc = null;

								row7.Player_team = null;

								row7.Opposit_Team = null;

								row7.Season_year = null;

								row7.is_manofThematch = null;

								row7.Age_As_on_match = null;

								row7.IsPlayers_Team_won = null;

								row7.Batting_Status = null;

								row7.Bowling_Status = null;

								row7.Player_Captain = null;

								row7.Opposit_captain = null;

								row7.Player_keeper = null;

								row7.Opposit_keeper = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row7.Player_match_SK = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Player_match_SK", "row7",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row7.Player_match_SK = null;

									}

								} else {

									row7.Player_match_SK = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.PlayerMatch_key = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.PlayerMatch_key = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row7.Match_Id = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Match_Id", "row7",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row7.Match_Id = null;

									}

								} else {

									row7.Match_Id = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row7.Player_Id = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Player_Id", "row7",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row7.Player_Id = null;

									}

								} else {

									row7.Player_Id = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Player_Name = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Player_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.DOB = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.DOB = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Batting_hand = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Batting_hand = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Bowling_skill = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Bowling_skill = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Country_Name = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Country_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Role_Desc = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Role_Desc = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Player_team = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Player_team = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Opposit_Team = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Opposit_Team = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Season_year = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Season_year = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 13;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.is_manofThematch = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.is_manofThematch = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 14;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Age_As_on_match = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Age_As_on_match = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 15;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.IsPlayers_Team_won = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.IsPlayers_Team_won = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 16;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Batting_Status = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Batting_Status = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 17;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Bowling_Status = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Bowling_Status = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 18;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Player_Captain = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Player_Captain = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 19;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Opposit_captain = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Opposit_captain = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 20;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Player_keeper = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Player_keeper = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 21;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row7.Opposit_keeper = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row7.Opposit_keeper = null;

								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row7 = null;

							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tLogRow_5 main ] start
							 */

							currentComponent = "tLogRow_5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row7"

								);
							}

///////////////////////		

							String[] row_tLogRow_5 = new String[22];

							if (row7.Player_match_SK != null) { //
								row_tLogRow_5[0] = String.valueOf(row7.Player_match_SK);

							} //

							if (row7.PlayerMatch_key != null) { //
								row_tLogRow_5[1] = String.valueOf(row7.PlayerMatch_key);

							} //

							if (row7.Match_Id != null) { //
								row_tLogRow_5[2] = String.valueOf(row7.Match_Id);

							} //

							if (row7.Player_Id != null) { //
								row_tLogRow_5[3] = String.valueOf(row7.Player_Id);

							} //

							if (row7.Player_Name != null) { //
								row_tLogRow_5[4] = String.valueOf(row7.Player_Name);

							} //

							if (row7.DOB != null) { //
								row_tLogRow_5[5] = String.valueOf(row7.DOB);

							} //

							if (row7.Batting_hand != null) { //
								row_tLogRow_5[6] = String.valueOf(row7.Batting_hand);

							} //

							if (row7.Bowling_skill != null) { //
								row_tLogRow_5[7] = String.valueOf(row7.Bowling_skill);

							} //

							if (row7.Country_Name != null) { //
								row_tLogRow_5[8] = String.valueOf(row7.Country_Name);

							} //

							if (row7.Role_Desc != null) { //
								row_tLogRow_5[9] = String.valueOf(row7.Role_Desc);

							} //

							if (row7.Player_team != null) { //
								row_tLogRow_5[10] = String.valueOf(row7.Player_team);

							} //

							if (row7.Opposit_Team != null) { //
								row_tLogRow_5[11] = String.valueOf(row7.Opposit_Team);

							} //

							if (row7.Season_year != null) { //
								row_tLogRow_5[12] = String.valueOf(row7.Season_year);

							} //

							if (row7.is_manofThematch != null) { //
								row_tLogRow_5[13] = String.valueOf(row7.is_manofThematch);

							} //

							if (row7.Age_As_on_match != null) { //
								row_tLogRow_5[14] = String.valueOf(row7.Age_As_on_match);

							} //

							if (row7.IsPlayers_Team_won != null) { //
								row_tLogRow_5[15] = String.valueOf(row7.IsPlayers_Team_won);

							} //

							if (row7.Batting_Status != null) { //
								row_tLogRow_5[16] = String.valueOf(row7.Batting_Status);

							} //

							if (row7.Bowling_Status != null) { //
								row_tLogRow_5[17] = String.valueOf(row7.Bowling_Status);

							} //

							if (row7.Player_Captain != null) { //
								row_tLogRow_5[18] = String.valueOf(row7.Player_Captain);

							} //

							if (row7.Opposit_captain != null) { //
								row_tLogRow_5[19] = String.valueOf(row7.Opposit_captain);

							} //

							if (row7.Player_keeper != null) { //
								row_tLogRow_5[20] = String.valueOf(row7.Player_keeper);

							} //

							if (row7.Opposit_keeper != null) { //
								row_tLogRow_5[21] = String.valueOf(row7.Opposit_keeper);

							} //

							util_tLogRow_5.addRow(row_tLogRow_5);
							nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

							row8 = row7;

							tos_count_tLogRow_5++;

							/**
							 * [tLogRow_5 main ] stop
							 */

							/**
							 * [tLogRow_5 process_data_begin ] start
							 */

							currentComponent = "tLogRow_5";

							/**
							 * [tLogRow_5 process_data_begin ] stop
							 */

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row8"

								);
							}

							row9 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1.matches(
									(row8.Role_Desc == null ? false : row8.Role_Desc.compareTo("Captain") == 0),
									"Role_Desc.compareTo(\"Captain\") == 0 failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row9 == null) {
									row9 = new row9Struct();
								}
								row9.Player_match_SK = row8.Player_match_SK;
								row9.PlayerMatch_key = row8.PlayerMatch_key;
								row9.Match_Id = row8.Match_Id;
								row9.Player_Id = row8.Player_Id;
								row9.Player_Name = row8.Player_Name;
								row9.DOB = row8.DOB;
								row9.Batting_hand = row8.Batting_hand;
								row9.Bowling_skill = row8.Bowling_skill;
								row9.Country_Name = row8.Country_Name;
								row9.Role_Desc = row8.Role_Desc;
								row9.Player_team = row8.Player_team;
								row9.Opposit_Team = row8.Opposit_Team;
								row9.Season_year = row8.Season_year;
								row9.is_manofThematch = row8.is_manofThematch;
								row9.Age_As_on_match = row8.Age_As_on_match;
								row9.IsPlayers_Team_won = row8.IsPlayers_Team_won;
								row9.Batting_Status = row8.Batting_Status;
								row9.Bowling_Status = row8.Bowling_Status;
								row9.Player_Captain = row8.Player_Captain;
								row9.Opposit_captain = row8.Opposit_captain;
								row9.Player_keeper = row8.Player_keeper;
								row9.Opposit_keeper = row8.Opposit_keeper;
								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tLogRow_6 main ] start
								 */

								currentComponent = "tLogRow_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row9"

									);
								}

///////////////////////		

								String[] row_tLogRow_6 = new String[22];

								if (row9.Player_match_SK != null) { //
									row_tLogRow_6[0] = String.valueOf(row9.Player_match_SK);

								} //

								if (row9.PlayerMatch_key != null) { //
									row_tLogRow_6[1] = String.valueOf(row9.PlayerMatch_key);

								} //

								if (row9.Match_Id != null) { //
									row_tLogRow_6[2] = String.valueOf(row9.Match_Id);

								} //

								if (row9.Player_Id != null) { //
									row_tLogRow_6[3] = String.valueOf(row9.Player_Id);

								} //

								if (row9.Player_Name != null) { //
									row_tLogRow_6[4] = String.valueOf(row9.Player_Name);

								} //

								if (row9.DOB != null) { //
									row_tLogRow_6[5] = String.valueOf(row9.DOB);

								} //

								if (row9.Batting_hand != null) { //
									row_tLogRow_6[6] = String.valueOf(row9.Batting_hand);

								} //

								if (row9.Bowling_skill != null) { //
									row_tLogRow_6[7] = String.valueOf(row9.Bowling_skill);

								} //

								if (row9.Country_Name != null) { //
									row_tLogRow_6[8] = String.valueOf(row9.Country_Name);

								} //

								if (row9.Role_Desc != null) { //
									row_tLogRow_6[9] = String.valueOf(row9.Role_Desc);

								} //

								if (row9.Player_team != null) { //
									row_tLogRow_6[10] = String.valueOf(row9.Player_team);

								} //

								if (row9.Opposit_Team != null) { //
									row_tLogRow_6[11] = String.valueOf(row9.Opposit_Team);

								} //

								if (row9.Season_year != null) { //
									row_tLogRow_6[12] = String.valueOf(row9.Season_year);

								} //

								if (row9.is_manofThematch != null) { //
									row_tLogRow_6[13] = String.valueOf(row9.is_manofThematch);

								} //

								if (row9.Age_As_on_match != null) { //
									row_tLogRow_6[14] = String.valueOf(row9.Age_As_on_match);

								} //

								if (row9.IsPlayers_Team_won != null) { //
									row_tLogRow_6[15] = String.valueOf(row9.IsPlayers_Team_won);

								} //

								if (row9.Batting_Status != null) { //
									row_tLogRow_6[16] = String.valueOf(row9.Batting_Status);

								} //

								if (row9.Bowling_Status != null) { //
									row_tLogRow_6[17] = String.valueOf(row9.Bowling_Status);

								} //

								if (row9.Player_Captain != null) { //
									row_tLogRow_6[18] = String.valueOf(row9.Player_Captain);

								} //

								if (row9.Opposit_captain != null) { //
									row_tLogRow_6[19] = String.valueOf(row9.Opposit_captain);

								} //

								if (row9.Player_keeper != null) { //
									row_tLogRow_6[20] = String.valueOf(row9.Player_keeper);

								} //

								if (row9.Opposit_keeper != null) { //
									row_tLogRow_6[21] = String.valueOf(row9.Opposit_keeper);

								} //

								util_tLogRow_6.addRow(row_tLogRow_6);
								nb_line_tLogRow_6++;
//////

//////                    

///////////////////////    			

								row10 = row9;

								tos_count_tLogRow_6++;

								/**
								 * [tLogRow_6 main ] stop
								 */

								/**
								 * [tLogRow_6 process_data_begin ] start
								 */

								currentComponent = "tLogRow_6";

								/**
								 * [tLogRow_6 process_data_begin ] stop
								 */

								/**
								 * [tAggregateRow_2_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_2";

								currentComponent = "tAggregateRow_2_AGGOUT";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row10"

									);
								}

								operation_finder_tAggregateRow_2.Player_Name = row10.Player_Name;
								operation_finder_tAggregateRow_2.Player_team = row10.Player_team;

								operation_finder_tAggregateRow_2.hashCodeDirty = true;

								operation_result_tAggregateRow_2 = hash_tAggregateRow_2
										.get(operation_finder_tAggregateRow_2);

								if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

									operation_result_tAggregateRow_2.Player_Name = operation_finder_tAggregateRow_2.Player_Name;
									operation_result_tAggregateRow_2.Player_team = operation_finder_tAggregateRow_2.Player_team;

									hash_tAggregateRow_2.put(operation_result_tAggregateRow_2,
											operation_result_tAggregateRow_2);

								} // G_OutMain_AggR_001

								operation_result_tAggregateRow_2.cap_count_clmCount++;
								operation_result_tAggregateRow_2.count++;

								tos_count_tAggregateRow_2_AGGOUT++;

								/**
								 * [tAggregateRow_2_AGGOUT main ] stop
								 */

								/**
								 * [tAggregateRow_2_AGGOUT process_data_begin ] start
								 */

								currentVirtualComponent = "tAggregateRow_2";

								currentComponent = "tAggregateRow_2_AGGOUT";

								/**
								 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
								 */

								/**
								 * [tAggregateRow_2_AGGOUT process_data_end ] start
								 */

								currentVirtualComponent = "tAggregateRow_2";

								currentComponent = "tAggregateRow_2_AGGOUT";

								/**
								 * [tAggregateRow_2_AGGOUT process_data_end ] stop
								 */

								/**
								 * [tLogRow_6 process_data_end ] start
								 */

								currentComponent = "tLogRow_6";

								/**
								 * [tLogRow_6 process_data_end ] stop
								 */

							} // End of branch "row9"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

							/**
							 * [tLogRow_5 process_data_end ] start
							 */

							currentComponent = "tLogRow_5";

							/**
							 * [tLogRow_5 process_data_end ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////

				java.io.PrintStream consoleOut_tLogRow_5 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
				}

				consoleOut_tLogRow_5.println(util_tLogRow_5.format().toString());
				consoleOut_tLogRow_5.flush();
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tLogRow_6 end ] start
				 */

				currentComponent = "tLogRow_6";

//////

				java.io.PrintStream consoleOut_tLogRow_6 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_6 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_6);
				}

				consoleOut_tLogRow_6.println(util_tLogRow_6.format().toString());
				consoleOut_tLogRow_6.flush();
//////
				globalMap.put("tLogRow_6_NB_LINE", nb_line_tLogRow_6);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tLogRow_6", true);
				end_Hash.put("tLogRow_6", System.currentTimeMillis());

				/**
				 * [tLogRow_6 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tAdvancedHash_row13 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row13", false);
				start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tAdvancedHash_row13 = 0;

				// connection name:row13
				// source node:tLogRow_7 - inputs:(row11) outputs:(row13,row13) | target
				// node:tAdvancedHash_row13 - inputs:(row13) outputs:()
				// linked node: tMap_2 - inputs:(row12,row13) outputs:(winners_captains)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row13Struct> tHash_Lookup_row13 = new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row13Struct>(
						matchingModeEnum_row13, "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/temp" + "/"
								+ jobName + "_tMapData_" + pid + "_Lookup_row13_",
						new org.talend.designer.components.persistent.IRowCreator() {
							public row13Struct createRowInstance() {
								return new row13Struct();
							}
						}

						, 2000000

				);

				tHash_Lookup_row13.initPut();

				globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);

				/**
				 * [tAdvancedHash_row13 begin ] stop
				 */

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());

				currentComponent = "tLogRow_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tLogRow_7 = 0;

				///////////////////////

				class Util_tLogRow_7 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[3];

					public void addRow(String[] row) {

						for (int i = 0; i < 3; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 2 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_7 util_tLogRow_7 = new Util_tLogRow_7();
				util_tLogRow_7.setTableName("tLogRow_7");
				util_tLogRow_7.addRow(new String[] { "Player_team", "Player_Name", "cap_count", });
				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
///////////////////////    			

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					row11.Player_team = aggregated_row_tAggregateRow_2.Player_team;

					row11.Player_Name = aggregated_row_tAggregateRow_2.Player_Name;
					row11.cap_count = (int) aggregated_row_tAggregateRow_2.count;
					row11.cap_count = (int) aggregated_row_tAggregateRow_2.cap_count_clmCount;

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_7 main ] start
					 */

					currentComponent = "tLogRow_7";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row11"

						);
					}

///////////////////////		

					String[] row_tLogRow_7 = new String[3];

					if (row11.Player_team != null) { //
						row_tLogRow_7[0] = String.valueOf(row11.Player_team);

					} //

					if (row11.Player_Name != null) { //
						row_tLogRow_7[1] = String.valueOf(row11.Player_Name);

					} //

					if (row11.cap_count != null) { //
						row_tLogRow_7[2] = String.valueOf(row11.cap_count);

					} //

					util_tLogRow_7.addRow(row_tLogRow_7);
					nb_line_tLogRow_7++;
//////

//////                    

///////////////////////    			

					row13 = row11;

					tos_count_tLogRow_7++;

					/**
					 * [tLogRow_7 main ] stop
					 */

					/**
					 * [tLogRow_7 process_data_begin ] start
					 */

					currentComponent = "tLogRow_7";

					/**
					 * [tLogRow_7 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row13 main ] start
					 */

					currentComponent = "tAdvancedHash_row13";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row13"

						);
					}

					row13Struct row13_HashRow = tHash_Lookup_row13.getNextFreeRow();

					row13_HashRow.Player_team = row13.Player_team;

					row13_HashRow.Player_Name = row13.Player_Name;

					row13_HashRow.cap_count = row13.cap_count;

					tHash_Lookup_row13.put(row13_HashRow);

					tos_count_tAdvancedHash_row13++;

					/**
					 * [tAdvancedHash_row13 main ] stop
					 */

					/**
					 * [tAdvancedHash_row13 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row13";

					/**
					 * [tAdvancedHash_row13 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row13 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row13";

					/**
					 * [tAdvancedHash_row13 process_data_end ] stop
					 */

					/**
					 * [tLogRow_7 process_data_end ] start
					 */

					currentComponent = "tLogRow_7";

					/**
					 * [tLogRow_7 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

//////

				java.io.PrintStream consoleOut_tLogRow_7 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_7 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_7);
				}

				consoleOut_tLogRow_7.println(util_tLogRow_7.format().toString());
				consoleOut_tLogRow_7.flush();
//////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row13 end ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				tHash_Lookup_row13.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tAdvancedHash_row13", true);
				end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row13 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_7 finally ] start
				 */

				currentComponent = "tLogRow_7";

				/**
				 * [tLogRow_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row13 finally ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				/**
				 * [tAdvancedHash_row13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final cricket5 cricket5Class = new cricket5();

		int exitCode = cricket5Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = cricket5.class.getClassLoader()
					.getResourceAsStream("base/cricket5_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = cricket5.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : cricket5");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 543307 characters generated by Talend Open Studio for Data Integration on the
 * March 20, 2023 at 4:00:54 PM EDT
 ************************************************************************************************/